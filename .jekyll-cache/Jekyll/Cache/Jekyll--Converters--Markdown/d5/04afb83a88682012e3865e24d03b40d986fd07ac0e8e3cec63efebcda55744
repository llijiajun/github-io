I"Y<h2 id="问题描述">问题描述</h2>

<p>O(1)时间内产生离散随机数的方法。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class Alias{
public:
	double* p;
	int* h;
	int* map1;
	int* map2;
	int n;
	Alias(vector&lt;pair&lt;int, double&gt; &gt; pi){
		double sum = 0;
		n = pi.size();
		stack&lt;int&gt; small;
		stack&lt;int&gt; big;
		p = new double[n];
		h = new int[n];
		map1 = new int[n];
		for(int i = 0; i &lt; n; i++){
			sum += pi[i].second;
			map1[i] = pi[i].first;
		}
		for(int i = 0; i &lt; n; i++){
			p[i] = pi[i].second * n / sum;
			if(p[i] &gt; 1)
				big.push(i);
			else
				small.push(i);
		}
		while(!small.empty() &amp;&amp; !big.empty()){
			int smallId = small.top();
			small.pop();
			int bigId = big.top();
			h[smallId] = bigId;
			p[bigId] -= (1-p[smallId]);
			if(p[bigId] &lt; 1){
				small.push(bigId);
				big.pop();
			}
		}
	}

	~Alias(){
		delete[] p;
		delete[] h;
		delete[] map1;
	}
	int generateRandom(Random&amp; R){
		int firstId = R.drand() * n;
		int secondId = R.drand() &lt; p[firstId] ? map1[firstId] : map1[h[firstId]];
		return secondId;
	}
	int generateRandom_t(Random&amp; R){
		int firstId = R.drand_t() * n;
		int secondId = R.drand_t() &lt; p[firstId] ? map1[firstId] : map1[h[firstId]];
		return secondId;
	}
};
</code></pre></div></div>
:ET