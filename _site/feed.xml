<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="http://localhost:4000/github-io/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/github-io/" rel="alternate" type="text/html" /><updated>2019-10-04T11:46:24+08:00</updated><id>http://localhost:4000/github-io/feed.xml</id><title type="html">Hades Jun</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">记一次 Prettydoc 的改造</title><link href="http://localhost:4000/github-io/2019-10-01/R-04" rel="alternate" type="text/html" title="记一次 Prettydoc 的改造" /><published>2019-10-01T00:00:00+08:00</published><updated>2019-10-01T00:00:00+08:00</updated><id>http://localhost:4000/github-io/2019-10-01/R-04</id><content type="html" xml:base="http://localhost:4000/github-io/2019-10-01/R-04">&lt;h2 id=&quot;声明&quot;&gt;声明&lt;/h2&gt;

&lt;p&gt;本文的出发点并不是鼓励去”剽窃“ prettydoc 包的成果，而是给一种比较小代价改造模板的流程介绍。如有侵权的可能性，请立刻联系我，我必删此文。&lt;/p&gt;

&lt;p&gt;写文章有两种观点，一种叫天下文章一大抄，一种叫站在巨人的肩上可以看得更远。前者在抄袭的道路上越走越远，后者推陈出新发明出更多很有意思的事。&lt;/p&gt;

&lt;p&gt;本文站在这样的分岔口上，对 Prettydoc 进行分析，读者可以选择是停留在类似于更改语句的程度，或是往前走一点，自己发明创造。&lt;/p&gt;

&lt;h2 id=&quot;改造原理分析&quot;&gt;改造原理分析&lt;/h2&gt;

&lt;h3 id=&quot;初步尝试的失败&quot;&gt;初步尝试的失败&lt;/h3&gt;

&lt;p&gt;最起初的想法是自己写一个模板，然后不断调 CSS 和 HTML 的位置和情况，自然而然能定义出自己的模板。但毕竟自己不是前端工程师，没有如此深厚的前端功力。之后的想法是利用已经写好的博客模板，直接进行迁移，我自身的博客在 Jekyll 的基础上进行开发，也改造过一些模板，于是从 Jekyll 模板 &lt;a href=&quot;http://jekyllthemes.org/&quot;&gt;http://jekyllthemes.org/&lt;/a&gt; 网站上试图下载一些下来，并进行修改。最后下载下来的模板由于其自身依赖的复杂性，十改九失败。即使改造成功，也存在着没调整好标签定位所导致网页变形的情况。
不得不承认，自身的前端水平还不足以在较短的时间内完成如此的工程。最后还是退而求其次，从原有的 Prettydoc 模板出发，进行改造。即使是Prettydoc的模板，起初也是github中各种高手实现的，邱怡轩做的Prettydoc也就是将这些模板综合起来，形成了一套完整的生成作业报告的流程。&lt;/p&gt;

&lt;h3 id=&quot;r之外所需要的知识&quot;&gt;R之外所需要的知识&lt;/h3&gt;

&lt;p&gt;一般的静态网页可以分为三个部分，分别用三种语言完成。这三个部分可以对应于人骨骼、皮囊、以血液为代表的动力系统。骨骼对应的是 HTML 所写的文本，HTML的知识可以自行搜索，概括的说就是文本及其定位。皮囊对应的是 CSS 给网页带来的层层渲染，最简单的例如颜色、字体、位置等。血液之类的动力其来源是 JavaScript ，其作用是时整个网页”动“起来，或者是可以相应某些动作。回到Prettydoc生成的文档，理解的第一步还是需要从 R Markdown 的链接生成命令开始。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/Applications/RStudio.app/Contents/MacOS/pandoc/pandoc +RTS -K512m -RTS temp.utf8.md --to html4 --from markdown+autolink_bare_uris+ascii_identifiers+tex_math_single_backslash+smart --output temp.html --email-obfuscation none --self-contained --standalone --section-divs --template /Library/Frameworks/R.framework/Versions/3.6/Resources/library/prettydoc/resources/templates/cayman.html --highlight-style pygments --mathjax --variable 'mathjax-url:https://mathjax.rstudio.com/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML' --css temp_files/style.css 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里解读编译命令需要参考上一篇&lt;a href=&quot;/github-io/2019-06-14/R-03&quot;&gt;文章&lt;/a&gt;，这里不做赘述。唯一需要提取的是模板所在的位置，这里在 &lt;code class=&quot;highlighter-rouge&quot;&gt;--template&lt;/code&gt; 后面的路径。找到路径后发现往上翻一下，有四个文件夹，css、fonts、images、templates，注意没有js的文件夹，但并不代表无法将js链接进模板中。最朴素的想法是，将js代码直接写到html里，虽然这并不是一种很好的编程风格。可以先从原理出发，把这些问题一一记下，之后我再一一解决。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;问题一 如何单独写自定义的js并将其引用？&lt;/li&gt;
    &lt;li&gt;问题二 到底prettydoc是如何将这些文件链接起来形成文档的？&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;先解决第二个问题，观察源 R Markdown文件所在的目录，然后点击Knit生成html的过程可以发现，生成时会先产生一个临时文件夹和一个临时的Markdown文件，所以原理其实也就是把需要的文件都抓一起，然后利用pandoc把该转变的语言都转变了，之后链接，删除临时文件即可。抓的是什么文件呢？再回到模板的目录，不难发现，也就五个模板，对应五种主题，由于网页一定需要CSS文件，所以再看CSS文件夹，除了字体文件夹，其余的十个CSS文件分别对应五种主题。&lt;/p&gt;

&lt;p&gt;根据面向对象的思想，不可能会将主题写死，这样不利于邱怡轩哪天心血来潮的时候，想自己加个主题还要重新编译自己的R包。基于这样的猜想，自定义主题就是复制一下他写的HTML文件和CSS文件，按照一样的形式，一对二，并将名字改成一致的，即可”抄袭“原有的模板，开始自定义主题。&lt;/p&gt;

&lt;p&gt;这时候，再仔细把每个主题的HTML打开，很容易发现，其中的内容居然是完全一样的！这给改造节约了很多时间。改来改去，用的标签都是一样的在HTML中写好的，会变的无非就是CSS中的样式而已。CSS变来变去，骨骼是不变的，无非是对应标题的位置放在左边还是右边的区别，配色好不好看，字体好不好看的区别而已。&lt;/p&gt;

&lt;h2 id=&quot;正式改造&quot;&gt;正式改造&lt;/h2&gt;

&lt;p&gt;下面以Cayman为例，改造一下模板。原因很简单，Cayman的CSS代码最短，改造起来最容易，其造型也比较容易为人接受。&lt;/p&gt;

&lt;p&gt;改造模板的第一步是将原有的 HTML文件和CSS文件都复制一下，然后重新命名为自己喜欢的名字。改完名字后，做一个测试，将yaml中的theme后面的主题换成自己改的名字，之后生成文档(做测试的时候最好不要复制修改命名Cayman，因为默认找不到主题文件时，会使用Cayman作为主题，这样就不确定复制是否有效)&lt;/p&gt;

&lt;p&gt;假定读者都找到了模板的位置，并进行了复制和改名，生成也成功了，下面来了第三个问题。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;问题三 CSS的代码还是茫茫多，如何才能改？&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;其实这个问题对会使用CSS的人来说应该不是问题，但毕竟不是人人都会，这里可以简单提一下，更多的还是需要参考讲解CSS的网站。一般标签有两种方式定位，一种是class 就是类，一种是id ，在CSS中定义了class的情况，对将所有带有同一个class名字的标签都渲染。而id是唯一标识，仅会渲染唯一的带有那个id的标签。也就是说CSS中一个个的大括号中的就是定义着某个类或者某个id的属性，找到想改的标签下对应的属性做修改即可，不写网页的人对标签位置的寻找也许不太清楚。&lt;/p&gt;

&lt;p&gt;寻找内容所对应的标签其实很简单。利用浏览器右键检查，就会打开开发者工具，自动定位到鼠标所在位置的标签名字。&lt;/p&gt;

&lt;p&gt;一般需要修改的就是背景颜色和字体颜色而已，而颜色一般有两种记录方法，都是RGB的方式，这里不做赘述。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;问题四 有两个CSS文件，到底修改哪一个？&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;其实两个CSS文件的内容是一致的，但实际上R Markdown用的是&lt;code class=&quot;highlighter-rouge&quot;&gt;\*.min.css&lt;/code&gt;。原因也可以深究一下，其实是和链接的过程有关，&lt;code class=&quot;highlighter-rouge&quot;&gt;\*.css&lt;/code&gt;的文件含有多余的回车分号等不必要的信息，虽然阅读起来比较方便。最后生成的文档就是一个简单的 HTML 文件，由于这些符号冗余的存在，会使得文件变得 臃肿，所以这里链接的是&lt;code class=&quot;highlighter-rouge&quot;&gt;\*.min.css&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;下面就Cayman简单修改一下：&lt;/p&gt;

&lt;p&gt;最醒目的颜色是Cayman最上面的一长条的颜色框，其颜色是渐变的，寻找一下渐变并带有head的属性，可以找到：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.page-header {
  color: #fff;
  text-align: center;
  background-color: #159957;
  background-image: linear-gradient(120deg, #155799, #159957);
  padding: 1.5rem 2rem;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;渐变色显然就是&lt;code class=&quot;highlighter-rouge&quot;&gt;background-image&lt;/code&gt;这里的颜色。不想随便试颜色最好的方法是上网去找喜欢的配色方案，之后可以得到以下 Head:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/github-io/images/R04-1.png&quot; alt=&quot;简单调头部的背景色&quot; /&gt;&lt;/p&gt;

&lt;p&gt;除此以外，还可以修改渐变颜色的方向，也可以将背景换成图片，但这些都仅仅是限制于表面的修改，最多能让文档的展示从表面上看上去与众不同，更深层次的修改，也就是添加 JavaScript 才是让报告更上一个台阶的地方。也是下面要谈的重点。&lt;/p&gt;

&lt;h2 id=&quot;让文档动起来&quot;&gt;让文档动起来&lt;/h2&gt;

&lt;p&gt;要引入 JavaScript 就必须先回答问题一，最朴素的想法是在模板外的目录下创建js文件夹，按照 CSS 文件的引用情况，有可能会自动将 js 文件夹复制过去，但实际上，这样的想法还是太天真。只要在生成temp_files文件夹时，将其拖拽出原来的文件夹(只有在R Markdown将临时文件删除前拖出去才能看)，就可以发现，在生成临时文件时，并没有生成 js 文件夹，自然直接放 js 文件夹不可行。转念再想，至少复制了images文件夹下的所有东西，那么复制images文件夹不也可以吗?基于这个朴素的想法，和路径的尝试，在将 script.js 文件放进images文件夹后，在 HTML 中的引用路径就可以如下：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script  src=&quot;temp_files/images/script.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;引用其实只要找到路径即可，若是临时的，特殊的不属于特定模板的js文件，也可以用更简单的方法引用，即在 R Markdown文件所在目录下放置script.js文件，那么引用的路径就可以是：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script  src=&quot;script.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;或者是&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script  src=&quot;./script.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这些都是比较取巧的解决方法，更为合理的解决方案还是应该从制作这个包的过程中，就将这个需求考虑进去。&lt;/p&gt;

&lt;p&gt;起初可以加JavaScript之后，我停留在比较低级的阶段——无非加点水印之类的，知道后来在读Graph Embedding代码时，发现了一个有意思的博客&lt;a href=&quot;https://zhuo931077127.github.io/&quot;&gt;https://zhuo931077127.github.io/&lt;/a&gt;。其背景的粒子效果特别炫酷，于是有了据为己有的贪念。上网一搜粒子动画，就找到了一个制作此类动画的JavaScript库——&lt;a href=&quot;https://github.com/VincentGarreau/particles.js&quot;&gt;https://github.com/VincentGarreau/particles.js&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;之后的制作过程也就比较简单了，在&lt;a href=&quot;https://codepen.io/VincentGarreau/pen/pnlso&quot;&gt;https://codepen.io/VincentGarreau/pen/pnlso&lt;/a&gt;上，先编辑好代码，然后将HTML、CSS、JavaScript的部分加到相应的部分中。例如 HTML 部分：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div id=&quot;particles-js&quot;&amp;gt;
&amp;lt;section class=&quot;main-content&quot; id=&quot;scro&quot;&amp;gt;
$body$
&amp;lt;span class=&quot;js-count-particles&quot;&amp;gt;--&amp;lt;/span&amp;gt;
&amp;lt;/section&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;其中，JavaScript部分直接生成script.js文件，并在 HTML 中添加 particle.min.js 等的引用。CSS 部分则稍微需要一些调整，这也是困扰我两天的问题。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;问题五 canvas 和 div 同时存在时，会“井水不犯河水”，如何做到github上那位用户的效果？&lt;/li&gt;
    &lt;li&gt;问题六 生成的canvas太短，仅够遮住第一页，但section标签里的内容太长怎么办？&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;问题五很好解决，将其中的一个position改成固定即可。问题六确实困扰了我很久，但在反复观察别人的博客后，领悟到了一句话：风动还是云动？是心在动。起初我想的都是怎么让 canvas 不断填充div，哪怕复制重复也可以，但效果并不好。其实博客中，根本是 canvas 没有动，动的是div标签。那么解决方法就很简单了，即给section加上一个新id(参看上一个代码段，section有一个&lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt;叫&lt;code class=&quot;highlighter-rouge&quot;&gt;scro&lt;/code&gt;),并在 CSS 中增加：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div id=&quot;particles-js&quot;&amp;gt;
&amp;lt;section class=&quot;main-content&quot; id=&quot;scro&quot;&amp;gt;
$body$
&amp;lt;span class=&quot;js-count-particles&quot;&amp;gt;--&amp;lt;/span&amp;gt;
&amp;lt;/section&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后可以得到的效果可以参看&lt;a href=&quot;/github-io/images/R04-1.html&quot;&gt;例子&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;此外，利用canvas写报告还是存在一个硬伤，在打印pdf时，canvas是不能随着文档的展开而展开的，这也是需要不断探索解决方案的，动静之间，不可兼得。&lt;/p&gt;

&lt;h2 id=&quot;小结&quot;&gt;小结&lt;/h2&gt;

&lt;p&gt;有时候并不是能力做不到，在互联网的帮助下，基本有问题就能找到方法解决，只是方法的好坏而已。探索时最大的难题是没有想法，失去了灵感，做的工作也就是如工匠般的简单搬运。直接改 Prettydoc 的文件有违我的本意，虽然这是最容易自定义的方法。其实修改一个包没有什么难的，难的是能搭建起这个框架，让我能在其中修改。整个修改过程只是心血来潮地简单尝试，还有很多可以尝试的空间。JavaScript可以加的动画无穷无尽，但有时我不得不反省，脱离了文档内容，而一味追求外观的酷炫是否南辕北辙？添加这样的动画，或许没有一开始时，简单地在文档中加水印和加反复制粘贴代码来的有意义。&lt;/p&gt;</content><author><name>冥郡</name></author><summary type="html">声明</summary></entry><entry><title type="html">基于 R Markdown 的展示模板创建和使用</title><link href="http://localhost:4000/github-io/2019-06-14/R-03" rel="alternate" type="text/html" title="基于 R Markdown 的展示模板创建和使用" /><published>2019-06-14T00:00:00+08:00</published><updated>2019-06-14T00:00:00+08:00</updated><id>http://localhost:4000/github-io/2019-06-14/R-03</id><content type="html" xml:base="http://localhost:4000/github-io/2019-06-14/R-03">&lt;h2 id=&quot;背景介绍&quot;&gt;背景介绍&lt;/h2&gt;

&lt;p&gt;英语演讲课曾说，幻灯片只是辅助工具，更核心和本质的是演讲者的内容。报告和幻灯片，其本质都是服务于展示知识这个过程，两者有着相通之处，利用 R Markdown 可以特别方便地将一份课程报告转化为课程答辩幻灯片，展示幻灯片填充些内容也就是总结的报告，这四年来，利用两者的转换关系，为我节约了不少时间。&lt;/p&gt;

&lt;p&gt;作为排版困难者，我尝试着探索了一些只关注内容的幻灯片和报告的写法，随着四年统计学习，R虽然已经快脱离我的常用语言名单，但我那利用 R Markdown 制作幻灯片和课程报告的经验还是不希望就随着我的不用而消亡。故记录下一些改装模板的经验。本文适合会 R Markdown，想自定义模板的人阅读。&lt;/p&gt;

&lt;h2 id=&quot;从yaml说起&quot;&gt;从YAML说起&lt;/h2&gt;

&lt;p&gt;或许使用 R Markdown 的人，有的甚至不知道什么是 YAML，其实就是在生成模板时，三条横杠框住的参数设置，要学会自定义模板，首先要知道有什么可以改，才能下手，类似于学编程初期时，有的人总对编译链接生成机器代码那一段不屑一顾。生成 PDF、HTML、Word 等等，整个过程就类似于编译的过程。而 YAML 文件，则类似于在命令行写的参数，决定了使用什么参数制作报告。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
title: &quot;Untitled&quot;
author: &quot;author&quot;
date: &quot;2019年6月14日&quot;
output: html_document
---
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;从最简单的生成一个普通 HTML 报告来说，看似这四行代码没什么好解释的，但实际上可以使用什么参数，可以根据这四行代码推断出。其中最重要的一行是第四行， output:html_document，在我只会套用模板而没深入研究时，无法注意到这行代码的重要性。这行代码的正确使用方式是在 R 中引入 rmarkdown 包后，输入 ?html_document，之后新世界便打开了，所谓 html_document 后加的参数根本就是这个函数的参数。rmarkdown 生成报告的命令可以在 R Markdown console 界面中看到，如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:/PROGRA~2/Pandoc/pandoc&quot; +RTS -K512m -RTS example.utf8.md --to html4 --from markdown+autolink_bare_uris+ascii_identifiers+tex_math_single_backslash+smart --output example.html --email-obfuscation none --self-contained --standalone --section-divs --template &quot;C:\Users\m1881\Documents\R\win-library\3.5\rmarkdown\rmd\h\default.html&quot; --no-highlight --variable highlightjs=1 --variable &quot;theme:bootstrap&quot; --include-in-header &quot;C:\Users\m1881\AppData\Local\Temp\Rtmpc5GI7B\rmarkdown-str37d03d181e60.html&quot; --mathjax --variable &quot;mathjax-url:https://mathjax.rstudio.com/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;虽然看起来一样没有很多信息，对某些同学来说，也许就是一堆乱码，但实际上熟悉编程的小朋友都知道，这些参数指定着编译的过程和各种参数。Knit 这个包怎么写我不清楚，但我能读出来的是，从 rmd 生成的 md 文件，被 Pandoc 转换为了各种其他的文件，中间有的文件是库的引用，有的文件是模板的引用。&lt;/p&gt;

&lt;p&gt;而更改模板的下手点也就在 –template 这里，对于“高手”来说，重新写一个包，也就是重新写一个 html_document 也就更改了模板的内容这类的东西，但如果不想重新写包的话，毫无疑问，改模板只需要把默认模板的位置找到，然后改其中的 CSS 渲染情况即可。&lt;/p&gt;

&lt;p&gt;对于最初级的同学，不妨根据 html_document 的帮助参数 toc 改一下，会发现可以多一个目录，这也是最基础的修改报告的方式，当然完全做不到自定义。&lt;/p&gt;

&lt;h2 id=&quot;报告&quot;&gt;报告&lt;/h2&gt;

&lt;p&gt;课程报告一般要求 PDF 形式的报告，HTML 的报告也是比较常用的，例如在狗熊会人才计划中的作业，大多数都要求上交 HTML 的报告。利用 R Markdown 做展示报告对统计学生来说，也算习以为常了。R Markdown 形式的报告，可以方便地插入 R 所绘制的统计图片，甚至在我计算机学业课程所要求的实验报告，我都使用 R Markdown 完成，可以说报告都是相似的。&lt;/p&gt;

&lt;h3 id=&quot;prettydoc-的千篇一律&quot;&gt;prettydoc 的千篇一律&lt;/h3&gt;

&lt;p&gt;这里得感谢邱怡轩师兄对 prettydoc 的制作，支持了我大学多年来作业报告的帮助。从大二第一次从李某师兄处看到 prettydoc 的样子，发展到现在是个统计学院稍微高年级的人都会的 R Markdown 模板，不得不说 prettydoc 有其迷人之处。&lt;/p&gt;

&lt;p&gt;下载 R 包 prettydoc 后，改模板当然还是从 YAML 和帮助能说明的比较清楚。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
title: &quot;Your Document Title&quot;
author: &quot;Document Author&quot;
date: &quot;`r Sys.Date()`&quot;
output:
  prettydoc::html_pretty:
    theme: architect
    highlight: github
---
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里的 theme 可以换五种形式的主题，五种主题的名字从何而来，也是从编译过程可以看出来&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;C:/PROGRA~2/Pandoc/pandoc&quot; +RTS -K512m -RTS Untitled.utf8.md --to html4 --from markdown+autolink_bare_uris+ascii_identifiers+tex_math_single_backslash+smart --output Untitled.html --email-obfuscation none --self-contained --standalone --section-divs --template &quot;C:/Users/m1881/Documents/R/win-library/3.5/prettydoc/resources/templates/architect.html&quot; --highlight-style pygments --mathjax --variable &quot;mathjax-url:https://mathjax.rstudio.com/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot; --css Untitled_files/style.css
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里编译使用模板的路径为”C:/Users/m1881/Documents/R/win-library/3.5/prettydoc/resources/templates/architect.html”，顺藤摸瓜，翻到这个目录下，看到的五个 HTML 的名字就是可以定制的模板名。探索到这一步，稍微懂一点 HTML 的同学都应该明白了，所谓改模板就把这个 HTML 复制一份，顺便把 CSS 也复制一份，然后直接改颜色参数，有能力的做点水印和选择保护，很容易就可以定制模板了。&lt;/p&gt;

&lt;p&gt;或许我水平真的一般，平常也没考虑过这些问题，当我探索到这一步时，已经是学 R 的两年后了，写这一文章的目的，一定程度上也是希望读文章的人能少走弯路。&lt;/p&gt;

&lt;p&gt;基于 Cayman 的模板，我稍加修改，定义出了 homework 、homeworkdark 两个模板，其特点除了稍微修改了颜色，还让 HTML 模板不可复制粘贴，这样可以在别人抄作业的时候，可以自己打一下代码，而不是完全复制粘贴，仔细看的话，还加了水印，加水印防粘贴的代码网上很多，这里不作详解，效果图如下：
&lt;img src=&quot;https://llijiajun.github.io/github-io/images/homework.png&quot; alt=&quot;白色调自制作业模板&quot; /&gt;
&lt;img src=&quot;https://llijiajun.github.io/github-io/images/homeworkdark.png&quot; alt=&quot;黑色调自制作业模板&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;rticles&quot;&gt;rticles&lt;/h3&gt;

&lt;p&gt;在两年前记得有人问我 PDF 生成怎么老是出错，老是有问题。其实我也没有完全探索明白，但有个很好用的 R 包，rticles。rticles 是谢大大开发的，比较方便的是默认的 CTeX 这个模板。其他模板并不是不能用，很多时候 bug 甚至都不在 R，而是在于 LaTeX 本身，出于沉迷 R Markdown 的探索，我起初并不是很会写LaTeX。使用时大部分情况下也是网上抄代码。探索自己到底在使用那个 LaTeX 编译，最重要的方式也是看console的命令。从命令中，很容易就可以抓取到模板的位置，如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;C:/PROGRA~2/Pandoc/pandoc&quot; +RTS -K512m -RTS 00.utf8.md --to latex --from markdown+autolink_bare_uris+ascii_identifiers+tex_math_single_backslash --output 00.tex --table-of-contents --toc-depth 2 --template &quot;C:\Users\m1881\Documents\R\win-library\3.5\rticles\rmarkdown\templates\ctex\resources\default.latex&quot; --number-sections --highlight-style tango --pdf-engine xelatex 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;从这里可以看出每个模板所对应的位置，之后的 –pdf-engine 也就表明了所用的 LaTeX 引擎，具体使用 LaTeX 的引擎目录则要看 Rstudio 的配置。&lt;/p&gt;

&lt;p&gt;困扰大多数人，不用 rticles 写 PDF 的根本原因可能是由于这个包的其他模板不支持中文。解决的思路很简单，就像其他的 LaTeX 一样，只需要在模板中添加一样的 LaTeX 支持即可，但是运行时依然可能出问题，这些 bug 并不是由 R Markdown 导致的，而很有可能是因为 LaTeX 没有下载所引用模板的库。探索之初，我仅在 TeXstudio 中自动下载包，出于原始的局限性，当我需要某个模板加中文时，我的策略是:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;更改所需要的模板 tex 文件，添加需要的包（除了添加中文支持，添加算法模块的模板也是可以的）&lt;/li&gt;
  &lt;li&gt;利用 RStudio 生成中间的 LaTeX 文件，XX.tex&lt;/li&gt;
  &lt;li&gt;利用 TeXstudio 编译 tex 文件，过程中会弹出是否安装新包的命令，点击安装即可&lt;/li&gt;
  &lt;li&gt;在 TeXstudio 中能生成 PDF 之后，在 RStudio 中自然也可以了&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;谢大大之前填坑写的包,可以参考 &lt;a href=&quot;https://yihui.name/tinytex/&quot;&gt;https://yihui.name/tinytex/&lt;/a&gt;，根据这个包，其实可以取消掉 TeXstudio 这一步，但尝试更多的插入和调试，在 TeXstudio 中尝试，是我个人的一些习惯。&lt;/p&gt;

&lt;p&gt;有人觉得使用 rticles 写报告很没有必要，那其实看这篇文章也没有什么必要，从我角度出发，也就是改完一次模板以后，什么时候来报告都能不去考虑版式，其实也是 LaTeX 的理念。&lt;/p&gt;

&lt;h2 id=&quot;幻灯片&quot;&gt;幻灯片&lt;/h2&gt;

&lt;p&gt;R Markdown 可以生成的幻灯片模板挺多，这里选择三种我自身常用的聊一聊。从生成的格式上，可以是 HTML、PPT、PDF，这取决于调用的是什么包。HTML 类型的幻灯片可以很好的加入交互效果，而以 beamer 为代表的 PDF 类型的幻灯片，则更适合做学术展示。&lt;/p&gt;

&lt;h3 id=&quot;remarkjs&quot;&gt;remarkjs&lt;/h3&gt;

&lt;p&gt;谈到 remark.js，必定要谈的是谢大大写的写轮眼包。起初知道可以用 RStudio 写好看的幻灯片也是从这里开始的。我曾经用两个周末探索了一下这个包，整体来说满足了普通展示幻灯片的所有要素。在这里我并不是很想说去更改这个包的模板，一方面是麻烦，且没有必要，另一方面是这个包其实已经含有很多扩展，问题只是在于如何使用。&lt;/p&gt;

&lt;p&gt;理解我之前所说的，阅读 YAML 文件就能做到当时我所没注意到的一件事，即更改主题。起初我并没有注意到写轮眼有着许多的自定义主题，于是自己写了一个CSS，甚至在一次讲座上把 CSS 改得特别复杂，可以加 logo、横条色等，但实际对于一般人使用来说，换主题只需要知道主题名字即可。&lt;/p&gt;

&lt;p&gt;发现更改还是通过阅读 YAML 的帮助探索出来的，也就是 xaringan::moon_reader，很容易发现在css定义里说明了换主题可以根据 xaringan:::list_css() 的结果更改， names(xaringan:::list_css()) 可以看到可以更改的主题和字体，不看名字看整个结果的路径则可以看到 CSS 文件所放置的位置，换句话说，增加新主题也就是加个 CSS 的事。当我再回顾谢大大的博客时发现，其实早在2017年，他就建议大家可以提交更新主题到他的 Github 下，之后下包自然可以自动更新。我估计并没有很多有闲心的人会去专门设计一款主题，如若是有人大主题的请回复我，也许 xaringan 在我使用的幻灯片名单中会排位更往前一点。&lt;/p&gt;

&lt;p&gt;特别想说的一点是，利用网页类型的幻灯片，用 R Markdown 书写是可以直接添加 HTML 标签的。出于这个优势，往幻灯片中加歌曲、下拉表单也就变成了一件很容易的事。唯一的缺憾是，在 R Markdown 中，书写 HTML 代码一般不会有问题，但不能直接写 JS 代码，JS 代码需要用代码块或是可以在整个 RStudio 编译完成之后再进行添加，稍微需要注意的是，应该提前保存代码，或者是单独写 JS 文件，添加引用。在每一次 RStudio 重新编译幻灯片的过程中，代码必不可免的会被重写和覆盖，从外部添加 JS 的过程也就需要重新完成。&lt;/p&gt;

&lt;p&gt;xaringan 虽然好，但依然没有达到心中，不再需要额外添加代码或者是排版动作就能构造清爽的幻灯片，一定程度上是这个包自身的局限性。这里不去详解完整的怎么更改主题，嵌入歌曲、嵌入下拉表单和加 logo 的过程，限于文章不宜太长，或许未来能有一个完整的梳理，取决于这条路是否在未来还有可行性，制作一个完整而有各种功能的 xaringa 幻灯片通常也可能耗费我一晚的时间。&lt;/p&gt;

&lt;h3 id=&quot;revealjs&quot;&gt;revealjs&lt;/h3&gt;

&lt;p&gt;说到 remark.js 的最无奈的问题莫过于当内容过长时，无法下拉，而是只能切开成多页幻灯片。在一年前，在 reveal.js 我依旧不能解决这个问题。但在一次偶然回顾中发现，
reveal.js 似乎是更新了，或者是之前没注意到，某页的背景可以上下拉动，这也就是说在 R Markdown 的 reveal.js 一样可以克服这个问题。其原理是在网页中嵌入框架，利用框架可以接入子 HTML，而子 HTML 可以上下拖动，由于 R Markdown 中引用的是 reveal.js 的 JS 文件，也就说明在 R Markdown 中嵌入相应的标签代码，JS 自然会完成渲染。此外，我突发奇想，可以嵌入可以下拉的网页，自然也可以嵌入 PDF，在展示幻灯片中嵌入论文或者是 bearmer 的PDF 也可以得到实现，在给他人展示时，假使需要使用论文中的结果，直接引用论文或别人的结果可是再方便不过了。&lt;/p&gt;

&lt;p&gt;或许我唠叨的这一切除了我以外没人看懂在说什么，但具体效果可以参照我 Github 中 frSVD，为了在 R 会中做展示的幻灯片，再阅读对应的 R Markdown 文件，对这个流程就比较清楚了。具体的链接如下：
&lt;a href=&quot;https://llijiajun.github.io/frSVD/#/&quot;&gt;https://llijiajun.github.io/frSVD/#/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;reveal.js 区别于 remark.js 而吸引我的是，同样是 HTML 类型幻灯片，它的主题设置和转场效果也许都更加酷炫。&lt;/p&gt;

&lt;p&gt;还是不得不说，也许有人觉得学这些制作方式，无非是炫技，但从更长远的角度说，与 R 和 Python 的联动才是我认为利用 R 做幻灯片的根本优势。现在关于 R 的动态框架接口并不是特别多，但至少嵌入地图、嵌入表单是很容易的一件事( DT 等包)，作为专业的统计人员，交互式幻灯片可以将意思表达得更清晰。被误解是表达者的宿命，但越多人能更易于理解，更能推动思想的传播。&lt;/p&gt;

&lt;h3 id=&quot;beamer&quot;&gt;beamer&lt;/h3&gt;

&lt;p&gt;最初接触 beamer 的时候，还是上课时，老师们版式一致的 PDF，后来在偶然之间，发现可以用R生成 beamer。也许大部分老师或者学生都是直接利用 LaTeX 模板生成，但 LaTeX 毕竟对新人不是特别友好，对新手最友好的语言莫过于 Markdown 了，半小时基本可以完成流利的 Markdown 文章的书写，利用 R Markdown 生成 beamer 远比直接写tex要方便的多。&lt;/p&gt;

&lt;p&gt;直接利用 beamer_presentation 生成的 beamer 幻灯片比较干净，可以根据主题和颜色主题修改，即可得到老师们常展示的幻灯片样式，参考的样式可以去看官方的链接：
&lt;a href=&quot;https://hartwork.org/beamer-theme-matrix/&quot;&gt;https://hartwork.org/beamer-theme-matrix/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;但仅仅使用默认的 beamer 是远远不够的，课程作业必须使用中文，英文也太过为难读者，加入中文的方式很简单，同样是去读编译的方式，还是利用 Pandoc 转换，而 Pandoc 可以直接生成 beamer 的模板：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pandoc -D beamer &amp;gt; beamer-template.tex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在我的 LaTeX 中加中文，通常就一句&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\usepackage[UTF8, heading = false, scheme = plain]{ctex}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;也就是在 \documentclass 后加一句，做出的幻灯片就能加入中文。这里也可以呼应一下前文，在 rticles 包里有很多论文的模板，一般来说，写这些论文或许全英文比较好，但如果课程报告中需要中文论文，又想用这些论文模板，也可以在中间加这一段，那么对应的 rticles 模板即可引入中文。&lt;/p&gt;

&lt;p&gt;借此启发， LaTeX 能做到的事不仅仅如此，例如插入规范的算法，插入合适的参考文献，流程图等等，而所需要做的仅仅是在模板中引入 LaTeX 代码即可在未来的所有幻灯片中都而可以使用，举个最简单的例子，在 beamer 幻灯片中加入 logo 和背景，效果如图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://llijiajun.github.io/github-io/images/beamer.png&quot; alt=&quot;自制人大beamer模板&quot; /&gt;&lt;/p&gt;

&lt;p&gt;受到香港大学同学的启发，自定义自己领域常用的符号和公式，或者是自定义公式图片，可以大幅度的减轻编写压力，而我未来要做的事，也就是积累足够多的LaTeX经验，并总结出一套适合自己使用的模板，利用 R Markdown 加速编写，总结一套人大模板也许只是第一步。最终一样能开发出 beamer 下的 prettydoc 包，以我懒散的性子，或许也就是有生之年系列。&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;本文对每个R Markdown的具体实现都并不是写的特别详细，也并非教程，只是汇总。也许有人有更好的想法和手段，希望也可以和我交流，但具体实现过程，写成博客也是有生之年系列，熟悉我的人可以私戳，我或许能尽力讲解。其他问题可以在以下评论，但请不要在评论区写太多没有营养的话，毕竟容量有限。更多广泛的可能性，可以阅读谢大大的书&lt;a href=&quot;https://bookdown.org/yihui/rmarkdown/&quot;&gt;https://bookdown.org/yihui/rmarkdown/&lt;/a&gt;，每每回顾都有所感，启发了我整个探索的过程。&lt;/p&gt;</content><author><name>冥郡</name></author><summary type="html">背景介绍</summary></entry><entry><title type="html">有意思的泡泡包</title><link href="http://localhost:4000/github-io/2019-06-14/Other-01" rel="alternate" type="text/html" title="有意思的泡泡包" /><published>2019-06-14T00:00:00+08:00</published><updated>2019-06-14T00:00:00+08:00</updated><id>http://localhost:4000/github-io/2019-06-14/Other-01</id><content type="html" xml:base="http://localhost:4000/github-io/2019-06-14/Other-01">&lt;h2 id=&quot;背景&quot;&gt;背景&lt;/h2&gt;

&lt;p&gt;在看图论文时顺藤摸瓜，翻到了别人的博客上，看到了一些有趣的动画，没想到上网一搜发现了这个有趣的js库。&lt;/p&gt;

&lt;p&gt;这个js效果简单，但融到博客里也会遇到一些麻烦的问题，在不断尝试下，终于将库改装到了普通的R模板上，之后尝试一下改装到博客里。&lt;/p&gt;</content><author><name>冥郡</name></author><summary type="html">背景</summary></entry><entry><title type="html">Alias算法</title><link href="http://localhost:4000/github-io/2019-04-23/CAL-03_Alias" rel="alternate" type="text/html" title="Alias算法" /><published>2019-04-23T00:00:00+08:00</published><updated>2019-04-23T00:00:00+08:00</updated><id>http://localhost:4000/github-io/2019-04-23/CAL-03_Alias</id><content type="html" xml:base="http://localhost:4000/github-io/2019-04-23/CAL-03_Alias">&lt;h2 id=&quot;问题描述&quot;&gt;问题描述&lt;/h2&gt;

&lt;p&gt;O(1)时间内产生离散随机数的方法。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Alias{
public:
	double* p;
	int* h;
	int* map1;
	int* map2;
	int n;
	Alias(vector&amp;lt;pair&amp;lt;int, double&amp;gt; &amp;gt; pi){
		double sum = 0;
		n = pi.size();
		stack&amp;lt;int&amp;gt; small;
		stack&amp;lt;int&amp;gt; big;
		p = new double[n];
		h = new int[n];
		map1 = new int[n];
		for(int i = 0; i &amp;lt; n; i++){
			sum += pi[i].second;
			map1[i] = pi[i].first;
		}
		for(int i = 0; i &amp;lt; n; i++){
			p[i] = pi[i].second * n / sum;
			if(p[i] &amp;gt; 1)
				big.push(i);
			else
				small.push(i);
		}
		while(!small.empty() &amp;amp;&amp;amp; !big.empty()){
			int smallId = small.top();
			small.pop();
			int bigId = big.top();
			h[smallId] = bigId;
			p[bigId] -= (1-p[smallId]);
			if(p[bigId] &amp;lt; 1){
				small.push(bigId);
				big.pop();
			}
		}
	}

	~Alias(){
		delete[] p;
		delete[] h;
		delete[] map1;
	}
	int generateRandom(Random&amp;amp; R){
		int firstId = R.drand() * n;
		int secondId = R.drand() &amp;lt; p[firstId] ? map1[firstId] : map1[h[firstId]];
		return secondId;
	}
	int generateRandom_t(Random&amp;amp; R){
		int firstId = R.drand_t() * n;
		int secondId = R.drand_t() &amp;lt; p[firstId] ? map1[firstId] : map1[h[firstId]];
		return secondId;
	}
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>冥郡</name></author><summary type="html">问题描述</summary></entry><entry><title type="html">暂别绿茵</title><link href="http://localhost:4000/github-io/2018-10-26/soccer" rel="alternate" type="text/html" title="暂别绿茵" /><published>2018-10-26T00:00:00+08:00</published><updated>2018-10-26T00:00:00+08:00</updated><id>http://localhost:4000/github-io/2018-10-26/soccer</id><content type="html" xml:base="http://localhost:4000/github-io/2018-10-26/soccer">&lt;h4 id=&quot;完成本科统计最后一场比赛遗憾的是没能走得更远没能再多打那么一场结束时没有哭也没有感觉特别激动与一同退役的师兄拥抱了一下彼此都明白散了可能就如此散了大一时也是如此这般最后一局打全场虽败入甲确是自己还不够强还不足以能挑起大梁就这样走了&quot;&gt;完成本科统计最后一场比赛，遗憾的是没能走得更远，没能再多打那么一场。结束时，没有哭，也没有感觉特别激动，与一同退役的师兄拥抱了一下，彼此都明白，散了可能就如此散了。大一时，也是如此这般最后一局打全场，虽败入甲。确是自己还不够强，还不足以能挑起大梁就这样走了。&lt;/h4&gt;

&lt;h4 id=&quot;人生有无数地离别虽然离开这块绿茵却也并非意味着永久终结足球眼前还有更重要的事情需要完成而我也并不是永久地离开憧憬着每年都需要离别四年来我送走了黄金一带然后自己送走自己这四年里对过错过不需要后悔过汗水会湿了球衣但不希望也不允许眼泪沾湿它人总是要学着坚强学着送别&quot;&gt;人生有无数地离别，虽然离开这块绿茵，却也并非意味着永久终结足球。眼前还有更重要的事情需要完成，而我也并不是永久地离开。憧憬着，每年都需要离别，四年来，我送走了黄金一带，然后自己送走自己。这四年里，对过错过，不需要后悔过。汗水会湿了球衣，但不希望也不允许眼泪沾湿它。人总是要学着坚强，学着送别。&lt;/h4&gt;

&lt;h4 id=&quot;幸运的是能有一项运动让你喜欢一辈子就像喜欢一个人一样&quot;&gt;幸运的是，能有一项运动，让你喜欢一辈子，就像喜欢一个人一样。&lt;/h4&gt;

&lt;h4 id=&quot;我想那狂风送走了我的愁绪恰如入冬的枯草始终会在明年再化作腐土掀起无数春风那时我可否躺在青青草地上看着青年们亦如当年模样&quot;&gt;我想，那狂风送走了我的愁绪，恰如入冬的枯草，始终会在明年，再化作腐土，掀起无数春风。那时，我可否躺在青青草地上，看着青年们，亦如当年模样。&lt;/h4&gt;

&lt;h4 id=&quot;时机不会再来再战之时只盼同袍依旧我无牵挂&quot;&gt;时机不会再来，再战之时，只盼，同袍依旧，我无牵挂。&lt;/h4&gt;

&lt;h4 id=&quot;之后已是我的独战考研不易唯有忘却所有专心致志只待明年考上时删此文再上场&quot;&gt;之后已是我的独战，考研不易，唯有忘却所有，专心致志，只待明年考上时，删此文，再上场。&lt;/h4&gt;</content><author><name>冥郡</name></author><summary type="html">完成本科统计最后一场比赛，遗憾的是没能走得更远，没能再多打那么一场。结束时，没有哭，也没有感觉特别激动，与一同退役的师兄拥抱了一下，彼此都明白，散了可能就如此散了。大一时，也是如此这般最后一局打全场，虽败入甲。确是自己还不够强，还不足以能挑起大梁就这样走了。</summary></entry><entry><title type="html">Visualization</title><link href="http://localhost:4000/github-io/2018-07-31/visualization" rel="alternate" type="text/html" title="Visualization" /><published>2018-07-31T00:00:00+08:00</published><updated>2018-07-31T00:00:00+08:00</updated><id>http://localhost:4000/github-io/2018-07-31/visualization</id><content type="html" xml:base="http://localhost:4000/github-io/2018-07-31/visualization">&lt;section data-transition=&quot;convex&quot; data-markdown=&quot;&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
### 可视化初探

&lt;div class=&quot;fragment&quot;&gt;
![随机的艺术](/github-io/images/visualization/animation1.gif)
&lt;/div&gt;

&lt;/script&gt;&lt;/section&gt;

&lt;section data-transition=&quot;convex&quot; data-markdown=&quot;&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
### 可视化初探

![随机的艺术](/github-io/images/visualization/animation1.gif){.fragments}

&lt;/script&gt;&lt;/section&gt;

&lt;section&gt;
&lt;section data-markdown=&quot;&quot; id=&quot;fragments&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Fragments
Hit the next arrow...
&lt;!--暂时没有比较好的markdown化的方法，就直接用标签--&gt;
&lt;p class=&quot;fragment&quot;&gt;... to step through ...&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fragment&quot;&gt;... a&lt;/span&gt; &lt;span class=&quot;fragment&quot;&gt;fragmented&lt;/span&gt; &lt;span class=&quot;fragment&quot;&gt;slide.&lt;/span&gt;&lt;/p&gt;
&lt;aside class=&quot;notes&quot;&gt;
This slide has fragments which are also stepped through in the notes window.
&lt;/aside&gt;
&lt;/script&gt;&lt;/section&gt;
&lt;section&gt;
&lt;/section&gt;&lt;/section&gt;</content><author><name>冥郡</name></author><summary type="html"></summary></entry><entry><title type="html">reveal.js模板</title><link href="http://localhost:4000/github-io/2018-07-29/revealjs" rel="alternate" type="text/html" title="reveal.js模板" /><published>2018-07-29T00:00:00+08:00</published><updated>2018-07-29T00:00:00+08:00</updated><id>http://localhost:4000/github-io/2018-07-29/revealjs</id><content type="html" xml:base="http://localhost:4000/github-io/2018-07-29/revealjs">&lt;section data-transition=&quot;convex&quot; data-markdown=&quot;&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
# Reveal.js
### The HTML Presentation Framework

Created by Hades
&lt;/script&gt;&lt;/section&gt;

&lt;section data-transition=&quot;convex&quot; data-markdown=&quot;&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Hello There
reveal.js enables you to create beautiful interactive slide decks using HTML. This presentation will show you examples of what it can do.
&lt;/script&gt;&lt;/section&gt;

&lt;section data-transition=&quot;convex&quot;&gt;
&lt;section data-markdown=&quot;&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Vertical Slides

Slides can be nested inside of each other.
Use the &lt;em&gt;Space&lt;/em&gt; key to navigate through all slides.

&lt;!--a href=&quot;#/2/1&quot;&gt;
![](https://s3.amazonaws.com/hakim-static/reveal-js/arrow.png)
&lt;/a --&gt;
&lt;a href=&quot;#/2/1&quot; class=&quot;navigate-down&quot;&gt;
&lt;img width=&quot;178&quot; height=&quot;238&quot; data-src=&quot;https://s3.amazonaws.com/hakim-static/reveal-js/arrow.png&quot; alt=&quot;Down arrow&quot;&gt;
&lt;/a&gt;
&lt;/script&gt;&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Basement Level 1&lt;/h2&gt;
Nested slides are useful for adding additional detail underneath a high level horizontal slide.&lt;/p&gt;
&lt;/script&gt;&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Basement Level 2&lt;/h2&gt;
That's it, time to go back up.

&lt;!--a href=&quot;#/2&quot;&gt;
![](&quot;https://s3.amazonaws.com/hakim-static/reveal-js/arrow.png&quot;)
&lt;/a--&gt;
&lt;a href=&quot;#/2&quot;&gt;
&lt;img width=&quot;178&quot; height=&quot;238&quot; data-src=&quot;https://s3.amazonaws.com/hakim-static/reveal-js/arrow.png&quot; alt=&quot;Up arrow&quot; style=&quot;transform: rotate(180deg); -webkit-transform: rotate(180deg);&quot;&gt;
&lt;/a&gt;

&lt;/script&gt;&lt;/section&gt;
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot; data-transition=&quot;convex&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Slides
Not a coder? Not a problem. There's a fully-featured visual editor for authoring these, try it out at &lt;a href=&quot;https://slides.com&quot; target=&quot;_blank&quot;&gt;https://slides.com&lt;/a&gt;.
&lt;/script&gt;&lt;/section&gt;
&lt;section data-markdown=&quot;&quot; data-transition=&quot;convex&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Point of View
Press &lt;strong&gt;ESC&lt;/strong&gt; to enter the slide overview.
Hold down alt and click on any element to zoom in on it using &lt;a href=&quot;http://lab.hakim.se/zoom-js&quot;&gt;zoom.js&lt;/a&gt;. Alt + click anywhere to zoom back out.
&lt;/script&gt;&lt;/section&gt;
&lt;section data-markdown=&quot;&quot; data-transition=&quot;convex&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Touch Optimized
Presentations look great on touch devices, like mobile phones and tablets. Simply swipe through your slides.
&lt;/script&gt;&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Markdown support

Write content using inline or external Markdown.
Instructions and more info available in the [readme](https://github.com/hakimel/reveal.js#markdown).
```
&lt;section data-markdown&gt;
## Markdown support
Write content using inline or external Markdown.
Instructions and more info available in the [readme](https://github.com/hakimel/reveal.js#markdown).
&lt;/section&gt;
```
&lt;/script&gt;
&lt;/section&gt;

&lt;section&gt;
&lt;section data-markdown=&quot;&quot; id=&quot;fragments&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Fragments
Hit the next arrow...
&lt;!--暂时没有比较好的markdown化的方法，就直接用标签--&gt;
&lt;p class=&quot;fragment&quot;&gt;... to step through ...&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fragment&quot;&gt;... a&lt;/span&gt; &lt;span class=&quot;fragment&quot;&gt;fragmented&lt;/span&gt; &lt;span class=&quot;fragment&quot;&gt;slide.&lt;/span&gt;&lt;/p&gt;
&lt;aside class=&quot;notes&quot;&gt;
This slide has fragments which are also stepped through in the notes window.
&lt;/aside&gt;
&lt;/script&gt;&lt;/section&gt;
&lt;section&gt;
&lt;h2&gt;Fragment Styles&lt;/h2&gt;
&lt;p&gt;There's different types of fragments, like:&lt;/p&gt;
&lt;p class=&quot;fragment grow&quot;&gt;grow&lt;/p&gt;
&lt;p class=&quot;fragment shrink&quot;&gt;shrink&lt;/p&gt;
&lt;p class=&quot;fragment fade-out&quot;&gt;fade-out&lt;/p&gt;
&lt;p class=&quot;fragment fade-up&quot;&gt;fade-up (also down, left and right!)&lt;/p&gt;
&lt;p class=&quot;fragment current-visible&quot;&gt;current-visible&lt;/p&gt;
&lt;p&gt;Highlight &lt;span class=&quot;fragment highlight-red&quot;&gt;red&lt;/span&gt; &lt;span class=&quot;fragment highlight-blue&quot;&gt;blue&lt;/span&gt; &lt;span class=&quot;fragment highlight-green&quot;&gt;green&lt;/span&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;

&lt;section id=&quot;transitions&quot;&gt;
	&lt;h2&gt;Transition Styles&lt;/h2&gt;
	&lt;p&gt;
		You can select from different transitions, like: &lt;br /&gt;
		&lt;a href=&quot;?transition=none#/transitions&quot;&gt;None&lt;/a&gt; -
		&lt;a href=&quot;?transition=fade#/transitions&quot;&gt;Fade&lt;/a&gt; -
		&lt;a href=&quot;?transition=slide#/transitions&quot;&gt;Slide&lt;/a&gt; -
		&lt;a href=&quot;?transition=convex#/transitions&quot;&gt;Convex&lt;/a&gt; -
		&lt;a href=&quot;?transition=concave#/transitions&quot;&gt;Concave&lt;/a&gt; -
		&lt;a href=&quot;?transition=zoom#/transitions&quot;&gt;Zoom&lt;/a&gt;
	&lt;/p&gt;
&lt;/section&gt;

&lt;section id=&quot;themes&quot;&gt;
	&lt;h2&gt;Themes&lt;/h2&gt;
	&lt;p&gt;
		reveal.js comes with a few themes built in: &lt;br /&gt;
		&lt;!-- Hacks to swap themes after the page has loaded. Not flexible and only intended for the reveal.js demo deck. --&gt;
		&lt;a href=&quot;#&quot; onclick=&quot;document.getElementById('theme').setAttribute('href','css/theme/black.css'); return false;&quot;&gt;Black (default)&lt;/a&gt; -
		&lt;a href=&quot;#&quot; onclick=&quot;document.getElementById('theme').setAttribute('href','css/theme/white.css'); return false;&quot;&gt;White&lt;/a&gt; -
		&lt;a href=&quot;#&quot; onclick=&quot;document.getElementById('theme').setAttribute('href','css/theme/league.css'); return false;&quot;&gt;League&lt;/a&gt; -
		&lt;a href=&quot;#&quot; onclick=&quot;document.getElementById('theme').setAttribute('href','css/theme/sky.css'); return false;&quot;&gt;Sky&lt;/a&gt; -
		&lt;a href=&quot;#&quot; onclick=&quot;document.getElementById('theme').setAttribute('href','css/theme/beige.css'); return false;&quot;&gt;Beige&lt;/a&gt; -
		&lt;a href=&quot;#&quot; onclick=&quot;document.getElementById('theme').setAttribute('href','css/theme/simple.css'); return false;&quot;&gt;Simple&lt;/a&gt; &lt;br /&gt;
		&lt;a href=&quot;#&quot; onclick=&quot;document.getElementById('theme').setAttribute('href','css/theme/serif.css'); return false;&quot;&gt;Serif&lt;/a&gt; -
		&lt;a href=&quot;#&quot; onclick=&quot;document.getElementById('theme').setAttribute('href','css/theme/blood.css'); return false;&quot;&gt;Blood&lt;/a&gt; -
		&lt;a href=&quot;#&quot; onclick=&quot;document.getElementById('theme').setAttribute('href','css/theme/night.css'); return false;&quot;&gt;Night&lt;/a&gt; -
		&lt;a href=&quot;#&quot; onclick=&quot;document.getElementById('theme').setAttribute('href','css/theme/moon.css'); return false;&quot;&gt;Moon&lt;/a&gt; -
		&lt;a href=&quot;#&quot; onclick=&quot;document.getElementById('theme').setAttribute('href','css/theme/solarized.css'); return false;&quot;&gt;Solarized&lt;/a&gt;
	&lt;/p&gt;
&lt;/section&gt;

&lt;section&gt;
&lt;section data-markdown=&quot;&quot; data-background=&quot;#dddddd&quot; data-transition=&quot;convex&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Slide Backgrounds
Set &lt;code&gt;data-background=&quot;#dddddd&quot;&lt;/code&gt; on a slide to change the background color. All CSS color formats are supported.
&lt;a href=&quot;#&quot; class=&quot;navigate-down&quot;&gt;
&lt;img width=&quot;178&quot; height=&quot;238&quot; data-src=&quot;https://s3.amazonaws.com/hakim-static/reveal-js/arrow.png&quot; alt=&quot;Down arrow&quot;&gt;
&lt;/a&gt;
&lt;/script&gt;&lt;/section&gt;
&lt;section data-background=&quot;/github-io/images/ppt.jpg&quot; data-markdown=&quot;&quot; data-transition=&quot;convex&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Image Backgrounds
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&amp;lt;section data-background=&quot;image.png&quot;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/script&gt;&lt;/section&gt;
&lt;section data-background=&quot;/github-io/images/test-img1.png&quot; data-background-repeat=&quot;repeat&quot; data-background-size=&quot;100px&quot; data-markdown=&quot;&quot; data-transition=&quot;convex&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Tiled Backgrounds
&lt;pre&gt;&lt;code class=&quot;hljs&quot; style=&quot;word-wrap: break-word;&quot;&gt;&amp;lt;section data-background=&quot;image.png&quot; data-background-repeat=&quot;repeat&quot; data-background-size=&quot;100px&quot;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/script&gt;&lt;/section&gt;
&lt;section data-background=&quot;http://i.giphy.com/90F8aUepslB84.gif&quot; data-markdown=&quot;&quot; data-transition=&quot;convex&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
##... and GIFs!
&lt;/script&gt;&lt;/section&gt;
&lt;/section&gt;

&lt;section data-transition=&quot;slide&quot; data-background=&quot;#4d7e65&quot; data-background-transition=&quot;zoom&quot; data-markdown=&quot;&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Background Transitions&lt;/h2&gt;
Different background transitions are available via the backgroundTransition option. This one's called &quot;zoom&quot;.
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;Reveal.configure({ backgroundTransition: 'zoom' })&lt;/code&gt;&lt;/pre&gt;
&lt;/script&gt;&lt;/section&gt;

&lt;section data-transition=&quot;slide&quot; data-background=&quot;#b5533c&quot; data-background-transition=&quot;zoom&quot; data-markdown=&quot;&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Background Transitions&lt;/h2&gt;
You can override background transitions per-slide.
&lt;pre&gt;&lt;code class=&quot;hljs&quot; style=&quot;word-wrap: break-word;&quot;&gt;&amp;lt;section data-background-transition=&quot;zoom&quot;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/script&gt;&lt;/section&gt;

&lt;section data-markdown=&quot;&quot; data-transition=&quot;convex&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Pretty Code
&lt;pre&gt;&lt;code class=&quot;hljs&quot; data-trim contenteditable&gt;
function linkify( selector ) {
  if( supports3DTransforms ) {

    var nodes = document.querySelectorAll( selector );

    for( var i = 0, len = nodes.length; i &amp;lt; len; i++ ) {
      var node = nodes[i];

      if( !node.className ) {
        node.className += ' roll';
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
Code syntax highlighting courtesy of &lt;a href=&quot;http://softwaremaniacs.org/soft/highlight/en/description/&quot;&gt;highlight.js&lt;/a&gt;.
&lt;/script&gt;&lt;/section&gt;

&lt;section data-markdown=&quot;&quot; data-transition=&quot;convex&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Marvelous List
&lt;ul&gt;
	&lt;li&gt;No order here&lt;/li&gt;
	&lt;li&gt;Or here&lt;/li&gt;
	&lt;li&gt;Or here&lt;/li&gt;
	&lt;li&gt;Or here&lt;/li&gt;
&lt;/ul&gt;
&lt;/script&gt;&lt;/section&gt;

&lt;section data-markdown=&quot;&quot; data-transition=&quot;convex&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Fantastic Ordered List
1. One is smaller than...
2. Two is smaller than...
3. Three!
&lt;/script&gt;&lt;/section&gt;

&lt;section data-markdown=&quot;&quot; data-transition=&quot;convex&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Tabular Tables
Item | Value | Quantity
:-: | :-: | :-:
Apples | $1 | 7
Lemonade | $2 | 18
Bread | $3 | 2
&lt;/script&gt;&lt;/section&gt;

&lt;section data-markdown=&quot;&quot; data-transition=&quot;convex&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Clever Quotes
These guys come in two forms, inline: &lt;q cite=&quot;http://searchservervirtualization.techtarget.com/definition/Our-Favorite-Technology-Quotations&quot;&gt;The nice thing about standards is that there are so many to choose from&lt;/q&gt; and block:
&lt;blockquote cite=&quot;http://searchservervirtualization.techtarget.com/definition/Our-Favorite-Technology-Quotations&quot;&gt;
&amp;ldquo;For years there has been a theory that millions of monkeys typing at random on millions of typewriters would
reproduce the entire works of Shakespeare. The Internet has proven this theory to be untrue.&amp;rdquo;
&lt;/blockquote&gt;
&lt;/script&gt;&lt;/section&gt;

&lt;section data-markdown=&quot;&quot; data-transition=&quot;convex&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Intergalactic Interconnections
You can link between slides internally,
&lt;a href=&quot;#/2/3&quot;&gt;like this&lt;/a&gt;.
&lt;/script&gt;&lt;/section&gt;

&lt;section data-markdown=&quot;&quot; data-transition=&quot;convex&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Speaker View
There's a &lt;a href=&quot;https://github.com/hakimel/reveal.js#speaker-notes&quot;&gt;speaker view&lt;/a&gt;. It includes a timer, preview of the upcoming slide as well as your speaker notes.&lt;/p&gt;
Press the &lt;em&gt;S&lt;/em&gt; key to try it out.&lt;/p&gt;
	&lt;aside class=&quot;notes&quot;&gt;
		Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit 's' on your keyboard).
	&lt;/aside&gt;
&lt;/script&gt;&lt;/section&gt;

&lt;section data-markdown=&quot;&quot; data-transition=&quot;convex&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Export to PDF
Presentations can be &lt;a href=&quot;https://github.com/hakimel/reveal.js#pdf-export&quot;&gt;exported to PDF&lt;/a&gt;, here's an example:&lt;/p&gt;
	&lt;iframe data-src=&quot;https://www.slideshare.net/slideshow/embed_code/42840540&quot; width=&quot;445&quot; height=&quot;355&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:3px solid #666; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen&gt; &lt;/iframe&gt;
&lt;/script&gt;&lt;/section&gt;

&lt;section data-markdown=&quot;&quot; data-transition=&quot;convex&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Global State
Set &lt;code&gt;data-state=&quot;something&quot;&lt;/code&gt; on a slide and &lt;code&gt;&quot;something&quot;&lt;/code&gt;
will be added as a class to the document element when the slide is open. This lets you
apply broader style changes, like switching the page background.
&lt;/script&gt;&lt;/section&gt;

&lt;section data-state=&quot;customevent&quot; data-markdown=&quot;&quot; data-transition=&quot;convex&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## State Events
Additionally custom events can be triggered on a per slide basis by binding to the &lt;code&gt;data-state&lt;/code&gt; name.
	&lt;pre&gt;&lt;code class=&quot;javascript&quot; data-trim contenteditable style=&quot;font-size: 18px;&quot;&gt;
Reveal.addEventListener( 'customevent', function() {
	console.log( '&quot;customevent&quot; has fired' );
} );
	&lt;/code&gt;&lt;/pre&gt;
&lt;/script&gt;&lt;/section&gt;

&lt;section data-markdown=&quot;&quot; data-transition=&quot;convex&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Take a Moment
Press B or . on your keyboard to pause the presentation. This is helpful when you're on stage and want to take distracting slides off the screen.
&lt;/script&gt;&lt;/section&gt;

&lt;section data-markdown=&quot;&quot; data-transition=&quot;convex&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Much more
	&lt;ul&gt;
		&lt;li&gt;Right-to-left support&lt;/li&gt;
		&lt;li&gt;&lt;a href=&quot;https://github.com/hakimel/reveal.js#api&quot;&gt;Extensive JavaScript API&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href=&quot;https://github.com/hakimel/reveal.js#auto-sliding&quot;&gt;Auto-progression&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href=&quot;https://github.com/hakimel/reveal.js#parallax-background&quot;&gt;Parallax backgrounds&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href=&quot;https://github.com/hakimel/reveal.js#keyboard-bindings&quot;&gt;Custom keyboard bindings&lt;/a&gt;&lt;/li&gt;
	&lt;/ul&gt;
&lt;/script&gt;&lt;/section&gt;

&lt;section style=&quot;text-align: left;&quot; data-markdown=&quot;&quot; data-transition=&quot;convex&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
# THE END

- &lt;a href=&quot;https://slides.com&quot;&gt;Try the online editor&lt;/a&gt; &lt;br&gt;
- &lt;a href=&quot;https://github.com/hakimel/reveal.js&quot;&gt;Source code &amp;amp; documentation&lt;/a&gt;

&lt;/script&gt;&lt;/section&gt;</content><author><name>冥郡</name></author><summary type="html"></summary></entry><entry><title type="html">PPT 之remark.js的实现</title><link href="http://localhost:4000/github-io/2018-07-28/remarkjs" rel="alternate" type="text/html" title="PPT 之remark.js的实现" /><published>2018-07-28T00:00:00+08:00</published><updated>2018-07-28T00:00:00+08:00</updated><id>http://localhost:4000/github-io/2018-07-28/remarkjs</id><content type="html" xml:base="http://localhost:4000/github-io/2018-07-28/remarkjs"></content><author><name>冥郡</name></author><summary type="html"></summary></entry><entry><title type="html">论码农、码商与码士</title><link href="http://localhost:4000/github-io/2018-07-20/Article-01" rel="alternate" type="text/html" title="论码农、码商与码士" /><published>2018-07-20T00:00:00+08:00</published><updated>2018-07-20T00:00:00+08:00</updated><id>http://localhost:4000/github-io/2018-07-20/Article-01</id><content type="html" xml:base="http://localhost:4000/github-io/2018-07-20/Article-01">&lt;p&gt;产生这三个概念还源于学习时，话说某日某人问我，什么EJB。我回答说，所谓EJB就是企业级的Java Bean。那什么是Java Bean呢？就是java里的咖啡豆。劈头盖脸就是一句”我当然认识Bean这个单词”，我都没意识到，原来Bean这个单词是那么简单，以致于我这样的翻译回答是在侮辱对方的智商。&lt;/p&gt;

&lt;p&gt;什么是Java Bean呢?我认为还得从Java这门语言的产生说起。程序员经常熬夜，一熬夜就喝咖啡。Java成员在讨论新语言取什么名字时，当时他们在喝咖啡，有人提议叫Java，于是最终名字就定为Java了。这样想来，其实也难怪Java这个单词那么容易被命名作语言名。要我说什么蒙牛、特仑苏，安排给程序员们每晚一瓶牛奶，也许下一个百年，称霸世界的某种新语言就能被命名为特仑苏，想想就刺激。&lt;/p&gt;

&lt;p&gt;而Java Bean本质上就是一些可串行化，并有一定规则的Java代码块。所谓Java编程，就像是煮咖啡一样，需要耐心和细心，也就是计算机从西方开始发展，要是从东方开始发展，难说当前最受欢迎的语言应该叫Tea, Java Bean也不再叫Java Bean 而是叫Tea Leaf。总结的说，完成一个泡咖啡艺术，首先先要磨好上佳的咖啡豆，写一个完整的应用，也要先造相对完美的类模块。以Java Bean代表这些可以放在一起，煮出完美咖啡的代码段实在是再好不过。&lt;/p&gt;

&lt;p&gt;胡扯了半天还得回到EJB是如何让我想出码商、码士的概念。自古以来，社会中主要有几种角色：士农工商。而写代码的人通常被称之为码农。这也是和这份职业的特色是十分相关的，为农者，勤勤恳恳，最重要的作用是打下了整个计算机界的基础。俗话总说，不要重复造轮子，可是作为码农，谁没有造过几个轮子，虽然可用者不知凡几。当开始写EJB以后，不难发现，EJB的分工可以是十分明确的。EJB的每一个组建是可以订制的，也可以是早已经搭建好的，直接拿来用即可。士农工商的出现，最重要的原因是，社会分工开始进一步明显。有的人善于整体的治理，成为了士官。有的人倾注于底层，专注于每一亩土地的利用，成为了农民；也有的人专注于吸收各自的劳动成功，成为物品的搬运工，成为了商人。总的来说，很久以前，代码界只存在一种人——写代码的人。人人都是农民，人人都是商人，每个人都在索求自己所需要的那部分代码，同时，每个人也都在耕耘，希望能建设出自我的空间。但随着编程语言的开发，特别的Java的变化，要求“程序员们”开始分工，开始只知冰山一角，而不知全貌。架构师就像那码士一般，提出了框架，并不负责每个细节的实现。只需要将码代码的任务交给旁人，就足以规划完成一个庞大的项目。最为明显的EJB可以进行自由买卖、自由装配。&lt;/p&gt;

&lt;p&gt;每个程序员花费半生心血所耕耘的土地，是他后半生躺着赚钱的桥梁。辛苦一生研究c语言的程序员万万没想到，这个世界还存在着只用写XML文件就能赚钱的程序员。但程序员总该明白，自己写的代码，或多或少，都传递在这个自由市场中。如今买卖的是Java Bean，很多写Java的程序员再难生存下去，这个世界，做农民提供粮食的人差不多就够了，再多，Java Bean 也就不值钱了。或许我所知的R语言、python 仍处在一个成长期，包的管理还处在平台托管的状态中。假设R不再那么开源，R包可以开始买卖，趋之若鹜的人，将不再造同样包的轮子。既然什么包都能卖，那综合一下爬虫包、表格解析包，一下子一个自动爬解析表格的包就做成了。本质上，只是利用了别人已经写好的两个组件。仔细想想，用谢大大最多的，自动生成rmarkdown,其实质也是利用了pandoc等软件，这不也是利用代码拼接的优势吗？&lt;/p&gt;

&lt;p&gt;码农，不能一辈子是码农，总要向码商，码士稍微转变一下。EJB已足以说明问题，程序的安全其实是更重要的一点，这需要更多的码士，研究出一个更为标准，并不断进化的准则，以保证程序的安全性。其次，需要更多的码商，总的来说，EJB已经有足够多的量，而实业中，缺少能够做拼接的人，Java代码写起来本身难度并不大，而更让人头疼的是极其复杂和严格的配置过程。&lt;/p&gt;

&lt;p&gt;总结本人，一分码士、三分码农、五分码商、剩下一分爱玩的心，总结起来，甚至称不上程序员，仅仅是一个简单码之学徒罢了。&lt;/p&gt;</content><author><name>冥郡</name></author><summary type="html">产生这三个概念还源于学习时，话说某日某人问我，什么EJB。我回答说，所谓EJB就是企业级的Java Bean。那什么是Java Bean呢？就是java里的咖啡豆。劈头盖脸就是一句”我当然认识Bean这个单词”，我都没意识到，原来Bean这个单词是那么简单，以致于我这样的翻译回答是在侮辱对方的智商。</summary></entry><entry><title type="html">各式排序算法及其c语言实现</title><link href="http://localhost:4000/github-io/2018-07-17/CAL-02_Sort" rel="alternate" type="text/html" title="各式排序算法及其c语言实现" /><published>2018-07-17T00:00:00+08:00</published><updated>2018-07-17T00:00:00+08:00</updated><id>http://localhost:4000/github-io/2018-07-17/CAL-02_Sort</id><content type="html" xml:base="http://localhost:4000/github-io/2018-07-17/CAL-02_Sort">&lt;h2 id=&quot;问题描述&quot;&gt;问题描述&lt;/h2&gt;

&lt;p&gt;排序算法可以说是算法的一个基础，这里在我水平范围内进行总结和归纳，并给出我自己实现的源码。&lt;/p&gt;

&lt;p&gt;以下，归纳基于比较的排序方法，因此，其运行时间上限基本都是O(nlog(n))&lt;/p&gt;

&lt;h2 id=&quot;时间对比&quot;&gt;时间对比&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;排序方法&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;平均情况&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;最好情况&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;最坏情况&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;辅助空间&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;稳定性&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;冒泡排序&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt;O(n^2)&lt;/script&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O(n)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt;O(n^2)&lt;/script&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O(1)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;稳定&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;插入排序&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt;O(n^2)&lt;/script&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O(n)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt;O(n^2)&lt;/script&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O(1)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;稳定&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;希尔排序&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt;O(nlogn)~O(n^2)&lt;/script&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt;O(n^{1.3})&lt;/script&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt;O(n^2)&lt;/script&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O(1)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;不稳定&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;堆排序&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt;O(nlogn)&lt;/script&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O(nlogn)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O(nlogn)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O(1)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;不稳定&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;归并排序&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt;O(nlogn)&lt;/script&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O(nlogn)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O(nlogn)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O(n)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;稳定&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;快速排序&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt;O(nlogn)&lt;/script&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O(nlogn)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt;O(n^2)&lt;/script&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O(1)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;不稳定&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;程序框架&quot;&gt;程序框架&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include&amp;lt;iostream&amp;gt;
#include&amp;lt;vector&amp;gt;
using namespace std;

template &amp;lt;class T&amp;gt;
class Sort{
private:
	vector&amp;lt;T&amp;gt; arrayT;
	vector&amp;lt;T&amp;gt; temp;
public:
	Sort(){}
	Sort(vector&amp;lt;T&amp;gt; arr){
		arrayT=arr;
		temp=arr;
	}
	bool compare(T a,T b,bool arise){
		if(arise)
			return (a&amp;gt;b);
		else
			return !(a&amp;gt;b);
	}
	void swap(int i,int j){
		T temp=arrayT[i];
		arrayT[i]=arrayT[j];
		arrayT[j]=temp;
	}
	void print(){
		for(int i=0;i&amp;lt;arrayT.size();i++)
			cout&amp;lt;&amp;lt;arrayT[i]&amp;lt;&amp;lt;&quot; &quot;;
		cout&amp;lt;&amp;lt;endl;
	}
	int getSize(){return arrayT.size();}
	void bubbleSort(bool arise);//冒泡排序
	void insertSort(bool arise);//插入排序
	void quickSort(bool arise,int low,int high);//快速排序 注意这里的high指的是最后一个元素的位置坐标
	void adjustHeap(int i,int length,bool arise);//建堆
	void HeapSort(bool arise);//堆排序
	void MergeSort(int start,int end,bool arise);//归并排序
	void Merge(int start,int mid,int end,bool arise);//归并
	void ShellSort(bool arise);//希尔排序
};

//这里加入冒泡排序部分代码
//这里加入插入排序部分代码

int main(){
	int a[10]={1,3,5,7,9,2,4,6,8,0};
	vector&amp;lt;int&amp;gt; b(a, a+10);
	Sort&amp;lt;int&amp;gt; sortb(b);
	sortb.print();
	sortb.bubbleSort(true);
	sortb.print();
	for(int i=0;i&amp;lt;b.size();i++)
			cout&amp;lt;&amp;lt;b[i]&amp;lt;&amp;lt;&quot; &quot;;
		cout&amp;lt;&amp;lt;endl;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;冒泡排序&quot;&gt;冒泡排序&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;template&amp;lt;class T&amp;gt;
void Sort&amp;lt;T&amp;gt;::bubbleSort(bool arise){
	int n=arrayT.size();
	for(int i=0;i&amp;lt;n-1;i++)
		for(int j=0;j&amp;lt;n-i-1;j++)
			if(compare(arrayT[j],arrayT[j+1],arise))
				swap(j,j+1);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;插入排序&quot;&gt;插入排序&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;template&amp;lt;class T&amp;gt;
void Sort&amp;lt;T&amp;gt;::insertSort(bool arise){
	int n=arrayT.size();
	vector&amp;lt;T&amp;gt;::iterator it=arrayT.begin(),in;
	for(int it=1;it&amp;lt;n;it++){
		int flag=0;
		for(in=arrayT.begin();in!=arrayT.begin()+it;in++){
			if(compare(*in,arrayT[it],arise)){
			//找到第一个不满足比较条件的进行插入，这里外循环使用index,内循环使用迭代器与vector的结构有关
			//若外循环也使用迭代器，则会出现bug
			//原因是，在删除元素之后，vector的元素会重构，所有在erase后的元素所在的位置都会改变，所以迭代器指的位置不再是原来的位置，也就形成了空引用
				T temp=arrayT[it];
				arrayT.erase(arrayT.begin()+it);
				arrayT.insert(in,1,temp);
				break;
			}
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;快速排序&quot;&gt;快速排序&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;template&amp;lt;class T&amp;gt;
void Sort&amp;lt;T&amp;gt;::quickSort(bool arise,int low,int high){
	if(low&amp;gt;=high){
		return;
	}
	int i=low;
	int j=high;
	T temp=arrayT[i];
	while(i&amp;lt;j){
		while(i&amp;lt;j&amp;amp;&amp;amp;compare(arrayT[j],temp,arise))j--;
		arrayT[i]=arrayT[j];
		while(i&amp;lt;j&amp;amp;&amp;amp;compare(temp,arrayT[i],arise))i++;
		arrayT[j]=arrayT[i];
	}
	arrayT[i]=temp;
	quickSort(arise,low,i-1);
	quickSort(arise,i+1,high);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;堆排序&quot;&gt;堆排序&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;template&amp;lt;class T&amp;gt;
void Sort&amp;lt;T&amp;gt;::adjustHeap(int i,int length,bool arise){
	T temp=arrayT[i];
	for(int k=i*2+1;k&amp;lt;length;k=2*k+1){
		if(k+1&amp;lt;length &amp;amp;&amp;amp; compare(arrayT[k+1],arrayT[k],arise))k++;
		if(compare(arrayT[k],temp,arise)){
			arrayT[i]=arrayT[k];
			i=k;
		}else
			break;
	}
	arrayT[i]=temp;
}
template&amp;lt;class T&amp;gt;
void Sort&amp;lt;T&amp;gt;::HeapSort(bool arise){
	for(int i=arrayT.size()/2-1;i&amp;gt;=0;i--)
		adjustHeap(i,arrayT.size(),arise);
	for(int j=arrayT.size()-1;j&amp;gt;0;j--){
		swap(0,j);
		adjustHeap(0,j,arise);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;归并排序&quot;&gt;归并排序&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;template&amp;lt;class T&amp;gt;
void Sort&amp;lt;T&amp;gt;::Merge(int start,int mid,int end,bool arise){
	int i=start,j=mid+1,k=start;
	while(i!=mid+1&amp;amp;&amp;amp;j!=end+1){
		if(compare(arrayT[i],arrayT[j],arise))
			temp[k++]=arrayT[j++];
		else
			temp[k++]=arrayT[i++];
	}
	while(i!=mid+1)
		temp[k++]=arrayT[i++];
	while(j!=end+1)
		temp[k++]=arrayT[j++];
	for(i=start;i&amp;lt;=end;i++)
		arrayT[i]=temp[i];
}

template&amp;lt;class T&amp;gt;
void Sort&amp;lt;T&amp;gt;::MergeSort(int start,int end,bool arise){
	int mid;
	if(start&amp;lt;end){
		mid=(start+end)/2;
		MergeSort(start,mid,arise);
		MergeSort(mid+1,end,arise);
		Merge(start,mid,end,arise);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;希尔排序&quot;&gt;希尔排序&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;template&amp;lt;class T&amp;gt;
void Sort&amp;lt;T&amp;gt;::ShellSort(bool arise){
	int len=arrayT.size();
	for(int div=len/2;div&amp;gt;=1;div=div/2)
		for(int i=0;i&amp;lt;=div;i++)
			for(int j=i;j&amp;lt;len-div;j+=div)
				for(int k=j;k&amp;lt;len;k+=div)
					if(compare(arrayT[j],arrayT[k],arise))
						swap(j,k);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>冥郡</name></author><summary type="html">问题描述</summary></entry></feed>