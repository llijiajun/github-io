<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.3">Jekyll</generator><link href="http://localhost:4000/github-io/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/github-io/" rel="alternate" type="text/html" /><updated>2019-06-19T00:12:04+08:00</updated><id>http://localhost:4000/github-io/</id><title type="html">Hades Jun</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">基于Rstudio的展示模板创建和使用</title><link href="http://localhost:4000/github-io/2019-06-14/R-03" rel="alternate" type="text/html" title="基于Rstudio的展示模板创建和使用" /><published>2019-06-14T00:00:00+08:00</published><updated>2019-06-14T00:00:00+08:00</updated><id>http://localhost:4000/github-io/2019-06-14/R-03</id><content type="html" xml:base="http://localhost:4000/github-io/2019-06-14/R-03">&lt;h2 id=&quot;背景介绍&quot;&gt;背景介绍&lt;/h2&gt;

&lt;p&gt;英语演讲课曾说，PPT只是辅助工具，更核心和本质的是演讲者的内容。作为排版困难者，尝试着探索了一些只关注内容的PPT写法，随着四年统计学习，R虽然已经快脱离我的常用语言名单，但利用Rstudio制作PPT的经验还是不希望就随着我的不用而消亡。故记录下一些改装模板的经验。本文适合会Rmarkdown，想自定义模板的人阅读。&lt;/p&gt;

&lt;h2 id=&quot;从yaml说起&quot;&gt;从yaml说起&lt;/h2&gt;

&lt;p&gt;或许使用Rmarkdown的人有的甚至不知道什么是yaml，其实就是在生成模板时，三条横杠框住的参数设置，要学会自定义模板，首先要知道有什么可以改，才能下手，类似于学编程初期时，有的人总对编译链接生成机器代码那一段不屑一顾，但生成pdf、html、word等等，整个过程就类似于编译的过程。而yaml文件，则决定了使用什么参数编译。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
title: &quot;Untitled&quot;
author: &quot;author&quot;
date: &quot;2019年6月14日&quot;
output: html_document
---
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;从最简单的生成一个普通html报告来说，看似这四行代码没什么好解释的，但可以使用什么参数却可以根据这四行代码推断出。其中最重要的一行是第四行，output:html_document，在我只会套用模板而没深入研究时，无法注意到这行代码的重要性。这行代码的正确使用方式是在R中引入rmarkdown包后，输入?html_document，之后新世界便打开了，所谓html_document后加的参数根本就是这个函数的参数。rmarkdown生成报告的命令可以在Rmarkdown console界面中看到，如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:/PROGRA~2/Pandoc/pandoc&quot; +RTS -K512m -RTS example.utf8.md --to html4 --from markdown+autolink_bare_uris+ascii_identifiers+tex_math_single_backslash+smart --output example.html --email-obfuscation none --self-contained --standalone --section-divs --template &quot;C:\Users\m1881\Documents\R\win-library\3.5\rmarkdown\rmd\h\default.html&quot; --no-highlight --variable highlightjs=1 --variable &quot;theme:bootstrap&quot; --include-in-header &quot;C:\Users\m1881\AppData\Local\Temp\Rtmpc5GI7B\rmarkdown-str37d03d181e60.html&quot; --mathjax --variable &quot;mathjax-url:https://mathjax.rstudio.com/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;虽然看起来一样没有很多信息，对某些同学来说，也许就是一堆乱码，但实际上熟悉编程的小朋友都知道，这些参数指定着编译的过程和各种参数。knit怎么写我不清楚，但我能读出来的是，从rmd生成的md文件，被pandoc转换为了各种其他的文件，中间有的文件是库的引用，有的文件是模板的引用。&lt;/p&gt;

&lt;p&gt;而更改模板的下手点也就在–template这里，对于“高手”来说，重新写一个包，也就是重新写一个html_document也就更改了模板的内容这类的东西，但如果不想重新写包的话，毫无疑问，改模板只需要把默认模板的位置找到，然后改其中的css渲染情况即可。&lt;/p&gt;

&lt;p&gt;对于最初级的同学，不妨根据html_document的帮助参数toc改一下，会发现可以多一个目录，这也是最基础的修改报告PPT的方式，当然完全做不到自定义。&lt;/p&gt;

&lt;h2 id=&quot;prettydoc的千篇一律&quot;&gt;Prettydoc的千篇一律&lt;/h2&gt;

&lt;p&gt;从大二第一次从李某师兄处看到prettydoc的样子，发展到现在是个统计学院稍微高年级的人都会的rmarkdown模板，不得不说prettydoc还是有其可爱之处的。&lt;/p&gt;

&lt;p&gt;首先是下载R包prettydoc,改模板当然还是从yaml和帮助能说明的比较清楚。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
title: &quot;Your Document Title&quot;
author: &quot;Document Author&quot;
date: &quot;`r Sys.Date()`&quot;
output:
  prettydoc::html_pretty:
    theme: architect
    highlight: github
---
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里的theme可以换五种形式的主题，五种主题的名字从何而来，也是从编译过程可以看出来&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;C:/PROGRA~2/Pandoc/pandoc&quot; +RTS -K512m -RTS Untitled.utf8.md --to html4 --from markdown+autolink_bare_uris+ascii_identifiers+tex_math_single_backslash+smart --output Untitled.html --email-obfuscation none --self-contained --standalone --section-divs --template &quot;C:/Users/m1881/Documents/R/win-library/3.5/prettydoc/resources/templates/architect.html&quot; --highlight-style pygments --mathjax --variable &quot;mathjax-url:https://mathjax.rstudio.com/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot; --css Untitled_files/style.css
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里编译使用模板的路径为”C:/Users/m1881/Documents/R/win-library/3.5/prettydoc/resources/templates/architect.html”，顺藤摸瓜，翻到这个目录下，看到的五个html的名字就是可以定制的模板名。探索到这一步，稍微懂一点html的同学都应该明白了，所谓改模板就把这个html复制一份，顺便把css也复制一份，然后直接改颜色参数，有能力的做点植入和选择保护，很容易就可以定制模板了。&lt;/p&gt;

&lt;p&gt;或许我水平真的一般，平常也没考虑过这些问题，当我探索到这一步时，已经是学R的两年后了，写这一文章的目的，一定程度上也是希望读文章的人能少走弯路。&lt;/p&gt;

&lt;p&gt;基于Cayman的模板，我稍加修改，定义出了homework、homeworkdark两个模板，其特点除了稍微修改了颜色，还让html模板不可复制粘贴，这样可以在别人抄作业的时候，可以自己打一下代码，而不是完全复制粘贴，仔细看的话，还加了水印，加水印防粘贴的代码网上很多，这里不作详解，效果图如下：
&lt;img src=&quot;/github-io/images/homework.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/github-io/images/homeworkdark.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;rticle&quot;&gt;rticle&lt;/h2&gt;

&lt;p&gt;在两年前记得有人问我pdf生成怎么老是出错，老是有问题。其实我也没有完全探索明白，但有个很好用的R包，rticle。这个包中有很多模板，其中最容易运行起来的是ctex这个模板，很多时候bug甚至都不在R，而是在于latex本身，出于沉迷Rmarkdown的探索，我并不是很会写latex。使用时大部分情况下也是网上抄代码。探索自己到底在使用那个latex编译，最重要的方式也是看console的命令。从命令中，很容易就可以抓取到模板的位置，如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;C:/PROGRA~2/Pandoc/pandoc&quot; +RTS -K512m -RTS 00.utf8.md --to latex --from markdown+autolink_bare_uris+ascii_identifiers+tex_math_single_backslash --output 00.tex --table-of-contents --toc-depth 2 --template &quot;C:\Users\m1881\Documents\R\win-library\3.5\rticles\rmarkdown\templates\ctex\resources\default.latex&quot; --number-sections --highlight-style tango --pdf-engine xelatex 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;从这里可以看出每个模板所对应的位置，之后的–pdf-engine也就表明了所用的latex引擎，具体使用latex的引擎目录则要看Rstudio的配置。&lt;/p&gt;

&lt;p&gt;困扰大多数人，不用Rmarkdown写pdf的根本原因有一定程度上是由于这个包的其他模板不支持中文。解决的思路很简单，就像其他的latex一样，只需要在模板中添加一样的latex支持即可，但是运行时依然可能出问题，这些bug并不是由Rmarkdown导致的，而很有可能是因为latex没有下载所引用模板的库。在Rstudio的角度是没有支持latex的下载的，但在texstudio中支持，所以每当我需要某个模板，还需要中文时，我的策略是:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;更改所需要的模板tex文件，添加需要的包（除了添加中文支持，添加算法模块的模板也是可以的）&lt;/li&gt;
  &lt;li&gt;利用Rstudio生成中间的latex文件，XX.tex&lt;/li&gt;
  &lt;li&gt;利用texstudio编译tex文件，过程中会弹出是否安装新包的命令，点击安装即可&lt;/li&gt;
  &lt;li&gt;在texstudio中能生成pdf之后，在Rstudio中自然也可以了&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;ps-必须确定的一点是rstudio操作的latex和texstudio操作的latex一定要是同一个下载太多的tex会使人分不清引擎&quot;&gt;PS. 必须确定的一点是Rstudio操作的latex和texstudio操作的latex一定要是同一个，下载太多的tex会使人分不清引擎&lt;/h4&gt;

&lt;p&gt;有人觉得使用rticle写报告很没有必要，那其实看这篇文章也没有什么必要，从我角度出发，也就是改完一次模板以后，什么时候来报告都能不去考虑版式，其实也是latex的理念。&lt;/p&gt;

&lt;h2 id=&quot;remarkjs&quot;&gt;remarkjs&lt;/h2&gt;

&lt;p&gt;谈到remark.js，必定要谈的是谢大大写的写轮眼包。起初知道可以用Rstudio写好看的ppt也是从这里开始的。我曾经用两个周末探索了一下这个包，整体来说满足了普通展示PPT的所有要素。在这里我并不是很想说去更改这个包的模板，一方面是麻烦，且没有必要，另一方面是这个包其实已经含有很多扩展。问题只是在于如何使用。理解我之前所说的，阅读yaml文件就能做到当时我所没注意到的一件事，即更改主题。起初我并没有注意到写轮眼有着许多的自定义主题，于是自己写了一个CSS，甚至在一次讲座上把css改得特别复杂，可以加logo、横条色等，但实际对于一般人使用来说，换主题只需要知道主题名字即可。方法还是阅读yaml的帮助，也就是xaringan::moon_reader,很容易发现在css定义里说明了换主题可以根据xaringan:::list_css()的结果更改，names(xaringan:::list_css())可以看到可以更改的主题和字体，不看名字看整个结果的路径则可以看到CSS文件所放置的位置，换句话说，增加新主题也就是加个css的事。当我再回顾谢大大的博客时发现，其实早在2017年，他就建议大家可以提交更新主题到他的github下，之后下包自然可以自动更新。我估计并没有很多有闲心的人会去专门设计一款主题，如若是有人大主题的请回复我，也许xaringan在我PPT名单中会排位更往前一点。&lt;/p&gt;

&lt;p&gt;特别想说的一点是，利用网页类型的PPT，用rmarkdown书写是可以直接添加html标签的。出于这个优势，往PPT中加歌曲、下拉表单也就变成了一件很容易的事。唯一的缺憾是，在rmd中，书写html代码一般不会有问题，但不能插入js代码。js的嵌入可以在整个rstudio编译完成之后再进行添加，稍微需要注意的是，应该提前保存代码，或者是单独写js文件，添加引用。在每一次Rstudio重新编译PPT的过程中，代码必不可免的会被重写和覆盖，这个添加js的过程也就需要重新完成。&lt;/p&gt;

&lt;p&gt;xaringan虽然好，但依然没有达到心中，不再需要额外添加代码或者是排版动作就能构造清爽的PPT，一定程度上是这个包自身的局限性。这里不去详解完整的怎么更改主题，嵌入歌曲、嵌入下拉表单和加logo的过程，限于文章不宜太长，或许未来能有一个完整的梳理，取决于这条路是否在未来还有可行性，制作一个完整而有各种功能的xaringa PPT通常也可能耗费我一晚的时间。&lt;/p&gt;

&lt;h2 id=&quot;revealjs&quot;&gt;revealjs&lt;/h2&gt;

&lt;p&gt;说到remark.js的最无奈的问题莫过于当内容过长时，无法下拉，而是只能切开成多页PPT。在一年前，在reveal.js我依旧不能解决这个问题。但在一次偶然回顾中发现，
reveal.js似乎是更新了，或者是之前没注意到，某页的背景可以上下拉动，这也就是说在Rmarkdown的reveal.js一样可以克服这个问题。其原理是在网页中嵌入框架，利用框架可以接入子html，而子html可以上下拖动，由于Rmarkdown中引用的是reveal.js的js文件，也就说明在Rmarkdown中嵌入相应的标签代码，js自然会完成渲染。此外，我突发奇想，可以嵌入可以下拉的网页，自然也可以嵌入PDF，在展示PPT中嵌入论文或者是bearmer的pdf也可以得到实现，在给他人展示时，假使需要使用论文中的结果，直接引用论文或别人的结果可是再方便不过了。&lt;/p&gt;

&lt;p&gt;或许我唠叨的这一切除了我以外没人看懂在说什么，但具体效果可以参照我github中frSVD，为了在R会中做展示的PPT，再阅读对应的Rmarkdown文件，对这个流程就比较清楚了。具体的链接如下：
&lt;a href=&quot;https://llijiajun.github.io/frSVD/#/&quot;&gt;https://llijiajun.github.io/frSVD/#/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;reveal.js区别于remark.js而吸引我的是，同样是html类型PPT，它的主题设置和转场效果也许都更加酷炫。&lt;/p&gt;

&lt;p&gt;还是不得不说，也许有人觉得学这些制作方式，无非是炫技，但从更长远的角度说，与R和python的联动才是我认为利用R做PPT的根本优势。现在关于R的动态框架接口并不是特别多，但至少嵌入地图、嵌入表单是很容易的一件事(DT等包)，作为专业的统计人员，交互式PPT可以将意思表达得更清晰。被误解是表达者的宿命，但越多人能更易于理解，更能推动思想的传播。&lt;/p&gt;

&lt;h2 id=&quot;beamer&quot;&gt;beamer&lt;/h2&gt;

&lt;p&gt;最初接触beamer的时候，还是上课时，老师们版式一致的pdf，后来在偶然之间，发现可以用R生成beamer。也许大部分老师或者学生都是直接利用latex模板生成，但latex毕竟对新人不是特别友好，对新手最友好的语言莫过于markdown了，半小时基本可以完成流利的markdown文章的书写，利用Rmarkdown生成beamer远比直接写tex要方便的多。&lt;/p&gt;

&lt;p&gt;直接利用beamer_presentation生成的beamer ppt比较干净，可以根据主题和颜色主题修改，即可得到老师们常展示的ppt样式，参考的样式可以去看官方的链接：
&lt;a href=&quot;https://hartwork.org/beamer-theme-matrix/&quot;&gt;https://hartwork.org/beamer-theme-matrix/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;但仅仅使用默认的beamer是远远不够的，课程作业必须使用中文，英文也太过为难读者，加入中文的方式很简单，同样是去读编译的方式，还是利用pandoc转换，而pandoc可以直接生成beamer的模板：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pandoc -D beamer &amp;gt; beamer-template.tex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在我的latex中加中文，通常就一句&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\usepackage[UTF8, heading = false, scheme = plain]{ctex}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;也就是在\documentclass后加一句，做出的PPT就能加入中文。这里也可以呼应一下前文，在rticle包里有很多论文的模板，一般来说，写这些论文或许全英文比较好，但如果课程报告中需要中文论文，又想用这些论文模板，也可以在中间加这一段，那么对应的rticle模板即可引入中文。&lt;/p&gt;

&lt;p&gt;借此启发，latex能做到的事不仅仅如此，例如插入规范的算法，插入合适的参考文献，流程图等等，而所需要做的仅仅是在模板中引入latex代码即可在未来的所有PPT中都而可以使用，举个最简单的例子，在beamerPPT中加入logo和背景，效果如图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/github-io/images/beamer.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;收到香港大学同学的启发，自定义自己领域常用的符号和公式，或者是自定义公式图片，可以大幅度的减轻编写压力，而我未来要做的事，也就是积累足够多的latex经验，并总结出一套适合自己使用的模板，利用rmarkdown加速编写，总结一套人大模板也许只是第一步。最终一样能开发出beamer下的prettydoc包，以我懒散的性子，或许也就是有生之年系列。&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;本文对每个Rmarkdown的具体实现都并不是写的特别详细，也并非教程，只是汇总。也许有人有更好的想法和手段，希望也可以和我交流，但具体实现过程，写成博客也是有生之年系列，熟悉我的人可以私戳，我或许能尽力讲解。其他问题可以在以下评论，但请不要在评论区写太多没有营养的话，毕竟容量有限。&lt;/p&gt;</content><author><name>冥郡</name></author><summary type="html">背景介绍</summary></entry><entry><title type="html">Alias算法</title><link href="http://localhost:4000/github-io/2019-04-23/CAL-03_Alias" rel="alternate" type="text/html" title="Alias算法" /><published>2019-04-23T00:00:00+08:00</published><updated>2019-04-23T00:00:00+08:00</updated><id>http://localhost:4000/github-io/2019-04-23/CAL-03_Alias</id><content type="html" xml:base="http://localhost:4000/github-io/2019-04-23/CAL-03_Alias">&lt;h2 id=&quot;问题描述&quot;&gt;问题描述&lt;/h2&gt;

&lt;p&gt;O(1)时间内产生离散随机数的方法。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Alias{
public:
	double* p;
	int* h;
	int* map1;
	int* map2;
	int n;
	Alias(vector&amp;lt;pair&amp;lt;int, double&amp;gt; &amp;gt; pi){
		double sum = 0;
		n = pi.size();
		stack&amp;lt;int&amp;gt; small;
		stack&amp;lt;int&amp;gt; big;
		p = new double[n];
		h = new int[n];
		map1 = new int[n];
		for(int i = 0; i &amp;lt; n; i++){
			sum += pi[i].second;
			map1[i] = pi[i].first;
		}
		for(int i = 0; i &amp;lt; n; i++){
			p[i] = pi[i].second * n / sum;
			if(p[i] &amp;gt; 1)
				big.push(i);
			else
				small.push(i);
		}
		while(!small.empty() &amp;amp;&amp;amp; !big.empty()){
			int smallId = small.top();
			small.pop();
			int bigId = big.top();
			h[smallId] = bigId;
			p[bigId] -= (1-p[smallId]);
			if(p[bigId] &amp;lt; 1){
				small.push(bigId);
				big.pop();
			}
		}
	}

	~Alias(){
		delete[] p;
		delete[] h;
		delete[] map1;
	}
	int generateRandom(Random&amp;amp; R){
		int firstId = R.drand() * n;
		int secondId = R.drand() &amp;lt; p[firstId] ? map1[firstId] : map1[h[firstId]];
		return secondId;
	}
	int generateRandom_t(Random&amp;amp; R){
		int firstId = R.drand_t() * n;
		int secondId = R.drand_t() &amp;lt; p[firstId] ? map1[firstId] : map1[h[firstId]];
		return secondId;
	}
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>冥郡</name></author><summary type="html">问题描述</summary></entry><entry><title type="html">暂别绿茵</title><link href="http://localhost:4000/github-io/2018-10-26/soccer" rel="alternate" type="text/html" title="暂别绿茵" /><published>2018-10-26T00:00:00+08:00</published><updated>2018-10-26T00:00:00+08:00</updated><id>http://localhost:4000/github-io/2018-10-26/soccer</id><content type="html" xml:base="http://localhost:4000/github-io/2018-10-26/soccer">&lt;h4 id=&quot;完成本科统计最后一场比赛遗憾的是没能走得更远没能再多打那么一场结束时没有哭也没有感觉特别激动与一同退役的师兄拥抱了一下彼此都明白散了可能就如此散了大一时也是如此这般最后一局打全场虽败入甲确是自己还不够强还不足以能挑起大梁就这样走了&quot;&gt;完成本科统计最后一场比赛，遗憾的是没能走得更远，没能再多打那么一场。结束时，没有哭，也没有感觉特别激动，与一同退役的师兄拥抱了一下，彼此都明白，散了可能就如此散了。大一时，也是如此这般最后一局打全场，虽败入甲。确是自己还不够强，还不足以能挑起大梁就这样走了。&lt;/h4&gt;

&lt;h4 id=&quot;人生有无数地离别虽然离开这块绿茵却也并非意味着永久终结足球眼前还有更重要的事情需要完成而我也并不是永久地离开憧憬着每年都需要离别四年来我送走了黄金一带然后自己送走自己这四年里对过错过不需要后悔过汗水会湿了球衣但不希望也不允许眼泪沾湿它人总是要学着坚强学着送别&quot;&gt;人生有无数地离别，虽然离开这块绿茵，却也并非意味着永久终结足球。眼前还有更重要的事情需要完成，而我也并不是永久地离开。憧憬着，每年都需要离别，四年来，我送走了黄金一带，然后自己送走自己。这四年里，对过错过，不需要后悔过。汗水会湿了球衣，但不希望也不允许眼泪沾湿它。人总是要学着坚强，学着送别。&lt;/h4&gt;

&lt;h4 id=&quot;幸运的是能有一项运动让你喜欢一辈子就像喜欢一个人一样&quot;&gt;幸运的是，能有一项运动，让你喜欢一辈子，就像喜欢一个人一样。&lt;/h4&gt;

&lt;h4 id=&quot;我想那狂风送走了我的愁绪恰如入冬的枯草始终会在明年再化作腐土掀起无数春风那时我可否躺在青青草地上看着青年们亦如当年模样&quot;&gt;我想，那狂风送走了我的愁绪，恰如入冬的枯草，始终会在明年，再化作腐土，掀起无数春风。那时，我可否躺在青青草地上，看着青年们，亦如当年模样。&lt;/h4&gt;

&lt;h4 id=&quot;时机不会再来再战之时只盼同袍依旧我无牵挂&quot;&gt;时机不会再来，再战之时，只盼，同袍依旧，我无牵挂。&lt;/h4&gt;

&lt;h4 id=&quot;之后已是我的独战考研不易唯有忘却所有专心致志只待明年考上时删此文再上场&quot;&gt;之后已是我的独战，考研不易，唯有忘却所有，专心致志，只待明年考上时，删此文，再上场。&lt;/h4&gt;</content><author><name>冥郡</name></author><summary type="html">完成本科统计最后一场比赛，遗憾的是没能走得更远，没能再多打那么一场。结束时，没有哭，也没有感觉特别激动，与一同退役的师兄拥抱了一下，彼此都明白，散了可能就如此散了。大一时，也是如此这般最后一局打全场，虽败入甲。确是自己还不够强，还不足以能挑起大梁就这样走了。</summary></entry><entry><title type="html">Visualization</title><link href="http://localhost:4000/github-io/2018-07-31/visualization" rel="alternate" type="text/html" title="Visualization" /><published>2018-07-31T00:00:00+08:00</published><updated>2018-07-31T00:00:00+08:00</updated><id>http://localhost:4000/github-io/2018-07-31/visualization</id><content type="html" xml:base="http://localhost:4000/github-io/2018-07-31/visualization">&lt;section data-transition=&quot;convex&quot; data-markdown=&quot;&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
### 可视化初探

&lt;div class=&quot;fragment&quot;&gt;
![随机的艺术](/github-io/images/visualization/animation1.gif)
&lt;/div&gt;

&lt;/script&gt;&lt;/section&gt;

&lt;section data-transition=&quot;convex&quot; data-markdown=&quot;&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
### 可视化初探

![随机的艺术](/github-io/images/visualization/animation1.gif){.fragments}

&lt;/script&gt;&lt;/section&gt;

&lt;section&gt;
&lt;section data-markdown=&quot;&quot; id=&quot;fragments&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Fragments
Hit the next arrow...
&lt;!--暂时没有比较好的markdown化的方法，就直接用标签--&gt;
&lt;p class=&quot;fragment&quot;&gt;... to step through ...&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fragment&quot;&gt;... a&lt;/span&gt; &lt;span class=&quot;fragment&quot;&gt;fragmented&lt;/span&gt; &lt;span class=&quot;fragment&quot;&gt;slide.&lt;/span&gt;&lt;/p&gt;
&lt;aside class=&quot;notes&quot;&gt;
This slide has fragments which are also stepped through in the notes window.
&lt;/aside&gt;
&lt;/script&gt;&lt;/section&gt;
&lt;section&gt;
&lt;/section&gt;&lt;/section&gt;</content><author><name>冥郡</name></author><summary type="html"></summary></entry><entry><title type="html">reveal.js模板</title><link href="http://localhost:4000/github-io/2018-07-29/revealjs" rel="alternate" type="text/html" title="reveal.js模板" /><published>2018-07-29T00:00:00+08:00</published><updated>2018-07-29T00:00:00+08:00</updated><id>http://localhost:4000/github-io/2018-07-29/revealjs</id><content type="html" xml:base="http://localhost:4000/github-io/2018-07-29/revealjs">&lt;section data-transition=&quot;convex&quot; data-markdown=&quot;&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
# Reveal.js
### The HTML Presentation Framework

Created by Hades
&lt;/script&gt;&lt;/section&gt;

&lt;section data-transition=&quot;convex&quot; data-markdown=&quot;&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Hello There
reveal.js enables you to create beautiful interactive slide decks using HTML. This presentation will show you examples of what it can do.
&lt;/script&gt;&lt;/section&gt;

&lt;section data-transition=&quot;convex&quot;&gt;
&lt;section data-markdown=&quot;&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Vertical Slides

Slides can be nested inside of each other.
Use the &lt;em&gt;Space&lt;/em&gt; key to navigate through all slides.

&lt;!--a href=&quot;#/2/1&quot;&gt;
![](https://s3.amazonaws.com/hakim-static/reveal-js/arrow.png)
&lt;/a --&gt;
&lt;a href=&quot;#/2/1&quot; class=&quot;navigate-down&quot;&gt;
&lt;img width=&quot;178&quot; height=&quot;238&quot; data-src=&quot;https://s3.amazonaws.com/hakim-static/reveal-js/arrow.png&quot; alt=&quot;Down arrow&quot;&gt;
&lt;/a&gt;
&lt;/script&gt;&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Basement Level 1&lt;/h2&gt;
Nested slides are useful for adding additional detail underneath a high level horizontal slide.&lt;/p&gt;
&lt;/script&gt;&lt;/section&gt;
&lt;section data-markdown=&quot;&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Basement Level 2&lt;/h2&gt;
That's it, time to go back up.

&lt;!--a href=&quot;#/2&quot;&gt;
![](&quot;https://s3.amazonaws.com/hakim-static/reveal-js/arrow.png&quot;)
&lt;/a--&gt;
&lt;a href=&quot;#/2&quot;&gt;
&lt;img width=&quot;178&quot; height=&quot;238&quot; data-src=&quot;https://s3.amazonaws.com/hakim-static/reveal-js/arrow.png&quot; alt=&quot;Up arrow&quot; style=&quot;transform: rotate(180deg); -webkit-transform: rotate(180deg);&quot;&gt;
&lt;/a&gt;

&lt;/script&gt;&lt;/section&gt;
&lt;/section&gt;

&lt;section data-markdown=&quot;&quot; data-transition=&quot;convex&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Slides
Not a coder? Not a problem. There's a fully-featured visual editor for authoring these, try it out at &lt;a href=&quot;https://slides.com&quot; target=&quot;_blank&quot;&gt;https://slides.com&lt;/a&gt;.
&lt;/script&gt;&lt;/section&gt;
&lt;section data-markdown=&quot;&quot; data-transition=&quot;convex&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Point of View
Press &lt;strong&gt;ESC&lt;/strong&gt; to enter the slide overview.
Hold down alt and click on any element to zoom in on it using &lt;a href=&quot;http://lab.hakim.se/zoom-js&quot;&gt;zoom.js&lt;/a&gt;. Alt + click anywhere to zoom back out.
&lt;/script&gt;&lt;/section&gt;
&lt;section data-markdown=&quot;&quot; data-transition=&quot;convex&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Touch Optimized
Presentations look great on touch devices, like mobile phones and tablets. Simply swipe through your slides.
&lt;/script&gt;&lt;/section&gt;

&lt;section data-markdown=&quot;&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Markdown support

Write content using inline or external Markdown.
Instructions and more info available in the [readme](https://github.com/hakimel/reveal.js#markdown).
```
&lt;section data-markdown&gt;
## Markdown support
Write content using inline or external Markdown.
Instructions and more info available in the [readme](https://github.com/hakimel/reveal.js#markdown).
&lt;/section&gt;
```
&lt;/script&gt;
&lt;/section&gt;

&lt;section&gt;
&lt;section data-markdown=&quot;&quot; id=&quot;fragments&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Fragments
Hit the next arrow...
&lt;!--暂时没有比较好的markdown化的方法，就直接用标签--&gt;
&lt;p class=&quot;fragment&quot;&gt;... to step through ...&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;fragment&quot;&gt;... a&lt;/span&gt; &lt;span class=&quot;fragment&quot;&gt;fragmented&lt;/span&gt; &lt;span class=&quot;fragment&quot;&gt;slide.&lt;/span&gt;&lt;/p&gt;
&lt;aside class=&quot;notes&quot;&gt;
This slide has fragments which are also stepped through in the notes window.
&lt;/aside&gt;
&lt;/script&gt;&lt;/section&gt;
&lt;section&gt;
&lt;h2&gt;Fragment Styles&lt;/h2&gt;
&lt;p&gt;There's different types of fragments, like:&lt;/p&gt;
&lt;p class=&quot;fragment grow&quot;&gt;grow&lt;/p&gt;
&lt;p class=&quot;fragment shrink&quot;&gt;shrink&lt;/p&gt;
&lt;p class=&quot;fragment fade-out&quot;&gt;fade-out&lt;/p&gt;
&lt;p class=&quot;fragment fade-up&quot;&gt;fade-up (also down, left and right!)&lt;/p&gt;
&lt;p class=&quot;fragment current-visible&quot;&gt;current-visible&lt;/p&gt;
&lt;p&gt;Highlight &lt;span class=&quot;fragment highlight-red&quot;&gt;red&lt;/span&gt; &lt;span class=&quot;fragment highlight-blue&quot;&gt;blue&lt;/span&gt; &lt;span class=&quot;fragment highlight-green&quot;&gt;green&lt;/span&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;

&lt;section id=&quot;transitions&quot;&gt;
	&lt;h2&gt;Transition Styles&lt;/h2&gt;
	&lt;p&gt;
		You can select from different transitions, like: &lt;br /&gt;
		&lt;a href=&quot;?transition=none#/transitions&quot;&gt;None&lt;/a&gt; -
		&lt;a href=&quot;?transition=fade#/transitions&quot;&gt;Fade&lt;/a&gt; -
		&lt;a href=&quot;?transition=slide#/transitions&quot;&gt;Slide&lt;/a&gt; -
		&lt;a href=&quot;?transition=convex#/transitions&quot;&gt;Convex&lt;/a&gt; -
		&lt;a href=&quot;?transition=concave#/transitions&quot;&gt;Concave&lt;/a&gt; -
		&lt;a href=&quot;?transition=zoom#/transitions&quot;&gt;Zoom&lt;/a&gt;
	&lt;/p&gt;
&lt;/section&gt;

&lt;section id=&quot;themes&quot;&gt;
	&lt;h2&gt;Themes&lt;/h2&gt;
	&lt;p&gt;
		reveal.js comes with a few themes built in: &lt;br /&gt;
		&lt;!-- Hacks to swap themes after the page has loaded. Not flexible and only intended for the reveal.js demo deck. --&gt;
		&lt;a href=&quot;#&quot; onclick=&quot;document.getElementById('theme').setAttribute('href','css/theme/black.css'); return false;&quot;&gt;Black (default)&lt;/a&gt; -
		&lt;a href=&quot;#&quot; onclick=&quot;document.getElementById('theme').setAttribute('href','css/theme/white.css'); return false;&quot;&gt;White&lt;/a&gt; -
		&lt;a href=&quot;#&quot; onclick=&quot;document.getElementById('theme').setAttribute('href','css/theme/league.css'); return false;&quot;&gt;League&lt;/a&gt; -
		&lt;a href=&quot;#&quot; onclick=&quot;document.getElementById('theme').setAttribute('href','css/theme/sky.css'); return false;&quot;&gt;Sky&lt;/a&gt; -
		&lt;a href=&quot;#&quot; onclick=&quot;document.getElementById('theme').setAttribute('href','css/theme/beige.css'); return false;&quot;&gt;Beige&lt;/a&gt; -
		&lt;a href=&quot;#&quot; onclick=&quot;document.getElementById('theme').setAttribute('href','css/theme/simple.css'); return false;&quot;&gt;Simple&lt;/a&gt; &lt;br /&gt;
		&lt;a href=&quot;#&quot; onclick=&quot;document.getElementById('theme').setAttribute('href','css/theme/serif.css'); return false;&quot;&gt;Serif&lt;/a&gt; -
		&lt;a href=&quot;#&quot; onclick=&quot;document.getElementById('theme').setAttribute('href','css/theme/blood.css'); return false;&quot;&gt;Blood&lt;/a&gt; -
		&lt;a href=&quot;#&quot; onclick=&quot;document.getElementById('theme').setAttribute('href','css/theme/night.css'); return false;&quot;&gt;Night&lt;/a&gt; -
		&lt;a href=&quot;#&quot; onclick=&quot;document.getElementById('theme').setAttribute('href','css/theme/moon.css'); return false;&quot;&gt;Moon&lt;/a&gt; -
		&lt;a href=&quot;#&quot; onclick=&quot;document.getElementById('theme').setAttribute('href','css/theme/solarized.css'); return false;&quot;&gt;Solarized&lt;/a&gt;
	&lt;/p&gt;
&lt;/section&gt;

&lt;section&gt;
&lt;section data-markdown=&quot;&quot; data-background=&quot;#dddddd&quot; data-transition=&quot;convex&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Slide Backgrounds
Set &lt;code&gt;data-background=&quot;#dddddd&quot;&lt;/code&gt; on a slide to change the background color. All CSS color formats are supported.
&lt;a href=&quot;#&quot; class=&quot;navigate-down&quot;&gt;
&lt;img width=&quot;178&quot; height=&quot;238&quot; data-src=&quot;https://s3.amazonaws.com/hakim-static/reveal-js/arrow.png&quot; alt=&quot;Down arrow&quot;&gt;
&lt;/a&gt;
&lt;/script&gt;&lt;/section&gt;
&lt;section data-background=&quot;/github-io/images/ppt.jpg&quot; data-markdown=&quot;&quot; data-transition=&quot;convex&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Image Backgrounds
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&amp;lt;section data-background=&quot;image.png&quot;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/script&gt;&lt;/section&gt;
&lt;section data-background=&quot;/github-io/images/test-img1.png&quot; data-background-repeat=&quot;repeat&quot; data-background-size=&quot;100px&quot; data-markdown=&quot;&quot; data-transition=&quot;convex&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Tiled Backgrounds
&lt;pre&gt;&lt;code class=&quot;hljs&quot; style=&quot;word-wrap: break-word;&quot;&gt;&amp;lt;section data-background=&quot;image.png&quot; data-background-repeat=&quot;repeat&quot; data-background-size=&quot;100px&quot;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/script&gt;&lt;/section&gt;
&lt;section data-background=&quot;http://i.giphy.com/90F8aUepslB84.gif&quot; data-markdown=&quot;&quot; data-transition=&quot;convex&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
##... and GIFs!
&lt;/script&gt;&lt;/section&gt;
&lt;/section&gt;

&lt;section data-transition=&quot;slide&quot; data-background=&quot;#4d7e65&quot; data-background-transition=&quot;zoom&quot; data-markdown=&quot;&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Background Transitions&lt;/h2&gt;
Different background transitions are available via the backgroundTransition option. This one's called &quot;zoom&quot;.
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;Reveal.configure({ backgroundTransition: 'zoom' })&lt;/code&gt;&lt;/pre&gt;
&lt;/script&gt;&lt;/section&gt;

&lt;section data-transition=&quot;slide&quot; data-background=&quot;#b5533c&quot; data-background-transition=&quot;zoom&quot; data-markdown=&quot;&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Background Transitions&lt;/h2&gt;
You can override background transitions per-slide.
&lt;pre&gt;&lt;code class=&quot;hljs&quot; style=&quot;word-wrap: break-word;&quot;&gt;&amp;lt;section data-background-transition=&quot;zoom&quot;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/script&gt;&lt;/section&gt;

&lt;section data-markdown=&quot;&quot; data-transition=&quot;convex&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Pretty Code
&lt;pre&gt;&lt;code class=&quot;hljs&quot; data-trim contenteditable&gt;
function linkify( selector ) {
  if( supports3DTransforms ) {

    var nodes = document.querySelectorAll( selector );

    for( var i = 0, len = nodes.length; i &amp;lt; len; i++ ) {
      var node = nodes[i];

      if( !node.className ) {
        node.className += ' roll';
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
Code syntax highlighting courtesy of &lt;a href=&quot;http://softwaremaniacs.org/soft/highlight/en/description/&quot;&gt;highlight.js&lt;/a&gt;.
&lt;/script&gt;&lt;/section&gt;

&lt;section data-markdown=&quot;&quot; data-transition=&quot;convex&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Marvelous List
&lt;ul&gt;
	&lt;li&gt;No order here&lt;/li&gt;
	&lt;li&gt;Or here&lt;/li&gt;
	&lt;li&gt;Or here&lt;/li&gt;
	&lt;li&gt;Or here&lt;/li&gt;
&lt;/ul&gt;
&lt;/script&gt;&lt;/section&gt;

&lt;section data-markdown=&quot;&quot; data-transition=&quot;convex&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Fantastic Ordered List
1. One is smaller than...
2. Two is smaller than...
3. Three!
&lt;/script&gt;&lt;/section&gt;

&lt;section data-markdown=&quot;&quot; data-transition=&quot;convex&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Tabular Tables
Item | Value | Quantity
:-: | :-: | :-:
Apples | $1 | 7
Lemonade | $2 | 18
Bread | $3 | 2
&lt;/script&gt;&lt;/section&gt;

&lt;section data-markdown=&quot;&quot; data-transition=&quot;convex&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Clever Quotes
These guys come in two forms, inline: &lt;q cite=&quot;http://searchservervirtualization.techtarget.com/definition/Our-Favorite-Technology-Quotations&quot;&gt;The nice thing about standards is that there are so many to choose from&lt;/q&gt; and block:
&lt;blockquote cite=&quot;http://searchservervirtualization.techtarget.com/definition/Our-Favorite-Technology-Quotations&quot;&gt;
&amp;ldquo;For years there has been a theory that millions of monkeys typing at random on millions of typewriters would
reproduce the entire works of Shakespeare. The Internet has proven this theory to be untrue.&amp;rdquo;
&lt;/blockquote&gt;
&lt;/script&gt;&lt;/section&gt;

&lt;section data-markdown=&quot;&quot; data-transition=&quot;convex&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Intergalactic Interconnections
You can link between slides internally,
&lt;a href=&quot;#/2/3&quot;&gt;like this&lt;/a&gt;.
&lt;/script&gt;&lt;/section&gt;

&lt;section data-markdown=&quot;&quot; data-transition=&quot;convex&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Speaker View
There's a &lt;a href=&quot;https://github.com/hakimel/reveal.js#speaker-notes&quot;&gt;speaker view&lt;/a&gt;. It includes a timer, preview of the upcoming slide as well as your speaker notes.&lt;/p&gt;
Press the &lt;em&gt;S&lt;/em&gt; key to try it out.&lt;/p&gt;
	&lt;aside class=&quot;notes&quot;&gt;
		Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit 's' on your keyboard).
	&lt;/aside&gt;
&lt;/script&gt;&lt;/section&gt;

&lt;section data-markdown=&quot;&quot; data-transition=&quot;convex&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Export to PDF
Presentations can be &lt;a href=&quot;https://github.com/hakimel/reveal.js#pdf-export&quot;&gt;exported to PDF&lt;/a&gt;, here's an example:&lt;/p&gt;
	&lt;iframe data-src=&quot;https://www.slideshare.net/slideshow/embed_code/42840540&quot; width=&quot;445&quot; height=&quot;355&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:3px solid #666; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen&gt; &lt;/iframe&gt;
&lt;/script&gt;&lt;/section&gt;

&lt;section data-markdown=&quot;&quot; data-transition=&quot;convex&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Global State
Set &lt;code&gt;data-state=&quot;something&quot;&lt;/code&gt; on a slide and &lt;code&gt;&quot;something&quot;&lt;/code&gt;
will be added as a class to the document element when the slide is open. This lets you
apply broader style changes, like switching the page background.
&lt;/script&gt;&lt;/section&gt;

&lt;section data-state=&quot;customevent&quot; data-markdown=&quot;&quot; data-transition=&quot;convex&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## State Events
Additionally custom events can be triggered on a per slide basis by binding to the &lt;code&gt;data-state&lt;/code&gt; name.
	&lt;pre&gt;&lt;code class=&quot;javascript&quot; data-trim contenteditable style=&quot;font-size: 18px;&quot;&gt;
Reveal.addEventListener( 'customevent', function() {
	console.log( '&quot;customevent&quot; has fired' );
} );
	&lt;/code&gt;&lt;/pre&gt;
&lt;/script&gt;&lt;/section&gt;

&lt;section data-markdown=&quot;&quot; data-transition=&quot;convex&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Take a Moment
Press B or . on your keyboard to pause the presentation. This is helpful when you're on stage and want to take distracting slides off the screen.
&lt;/script&gt;&lt;/section&gt;

&lt;section data-markdown=&quot;&quot; data-transition=&quot;convex&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
## Much more
	&lt;ul&gt;
		&lt;li&gt;Right-to-left support&lt;/li&gt;
		&lt;li&gt;&lt;a href=&quot;https://github.com/hakimel/reveal.js#api&quot;&gt;Extensive JavaScript API&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href=&quot;https://github.com/hakimel/reveal.js#auto-sliding&quot;&gt;Auto-progression&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href=&quot;https://github.com/hakimel/reveal.js#parallax-background&quot;&gt;Parallax backgrounds&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href=&quot;https://github.com/hakimel/reveal.js#keyboard-bindings&quot;&gt;Custom keyboard bindings&lt;/a&gt;&lt;/li&gt;
	&lt;/ul&gt;
&lt;/script&gt;&lt;/section&gt;

&lt;section style=&quot;text-align: left;&quot; data-markdown=&quot;&quot; data-transition=&quot;convex&quot;&gt;&lt;script type=&quot;text/template&quot;&gt;
# THE END

- &lt;a href=&quot;https://slides.com&quot;&gt;Try the online editor&lt;/a&gt; &lt;br&gt;
- &lt;a href=&quot;https://github.com/hakimel/reveal.js&quot;&gt;Source code &amp;amp; documentation&lt;/a&gt;

&lt;/script&gt;&lt;/section&gt;</content><author><name>冥郡</name></author><summary type="html"></summary></entry><entry><title type="html">PPT 之remark.js的实现</title><link href="http://localhost:4000/github-io/2018-07-28/remarkjs" rel="alternate" type="text/html" title="PPT 之remark.js的实现" /><published>2018-07-28T00:00:00+08:00</published><updated>2018-07-28T00:00:00+08:00</updated><id>http://localhost:4000/github-io/2018-07-28/remarkjs</id><content type="html" xml:base="http://localhost:4000/github-io/2018-07-28/remarkjs"></content><author><name>冥郡</name></author><summary type="html"></summary></entry><entry><title type="html">论码农、码商与码士</title><link href="http://localhost:4000/github-io/2018-07-20/Article-01" rel="alternate" type="text/html" title="论码农、码商与码士" /><published>2018-07-20T00:00:00+08:00</published><updated>2018-07-20T00:00:00+08:00</updated><id>http://localhost:4000/github-io/2018-07-20/Article-01</id><content type="html" xml:base="http://localhost:4000/github-io/2018-07-20/Article-01">&lt;p&gt;产生这三个概念还源于学习时，话说某日某人问我，什么EJB。我回答说，所谓EJB就是企业级的Java Bean。那什么是Java Bean呢？就是java里的咖啡豆。劈头盖脸就是一句”我当然认识Bean这个单词”，我都没意识到，原来Bean这个单词是那么简单，以致于我这样的翻译回答是在侮辱对方的智商。&lt;/p&gt;

&lt;p&gt;什么是Java Bean呢?我认为还得从Java这门语言的产生说起。程序员经常熬夜，一熬夜就喝咖啡。Java成员在讨论新语言取什么名字时，当时他们在喝咖啡，有人提议叫Java，于是最终名字就定为Java了。这样想来，其实也难怪Java这个单词那么容易被命名作语言名。要我说什么蒙牛、特仑苏，安排给程序员们每晚一瓶牛奶，也许下一个百年，称霸世界的某种新语言就能被命名为特仑苏，想想就刺激。&lt;/p&gt;

&lt;p&gt;而Java Bean本质上就是一些可串行化，并有一定规则的Java代码块。所谓Java编程，就像是煮咖啡一样，需要耐心和细心，也就是计算机从西方开始发展，要是从东方开始发展，难说当前最受欢迎的语言应该叫Tea, Java Bean也不再叫Java Bean 而是叫Tea Leaf。总结的说，完成一个泡咖啡艺术，首先先要磨好上佳的咖啡豆，写一个完整的应用，也要先造相对完美的类模块。以Java Bean代表这些可以放在一起，煮出完美咖啡的代码段实在是再好不过。&lt;/p&gt;

&lt;p&gt;胡扯了半天还得回到EJB是如何让我想出码商、码士的概念。自古以来，社会中主要有几种角色：士农工商。而写代码的人通常被称之为码农。这也是和这份职业的特色是十分相关的，为农者，勤勤恳恳，最重要的作用是打下了整个计算机界的基础。俗话总说，不要重复造轮子，可是作为码农，谁没有造过几个轮子，虽然可用者不知凡几。当开始写EJB以后，不难发现，EJB的分工可以是十分明确的。EJB的每一个组建是可以订制的，也可以是早已经搭建好的，直接拿来用即可。士农工商的出现，最重要的原因是，社会分工开始进一步明显。有的人善于整体的治理，成为了士官。有的人倾注于底层，专注于每一亩土地的利用，成为了农民；也有的人专注于吸收各自的劳动成功，成为物品的搬运工，成为了商人。总的来说，很久以前，代码界只存在一种人——写代码的人。人人都是农民，人人都是商人，每个人都在索求自己所需要的那部分代码，同时，每个人也都在耕耘，希望能建设出自我的空间。但随着编程语言的开发，特别的Java的变化，要求“程序员们”开始分工，开始只知冰山一角，而不知全貌。架构师就像那码士一般，提出了框架，并不负责每个细节的实现。只需要将码代码的任务交给旁人，就足以规划完成一个庞大的项目。最为明显的EJB可以进行自由买卖、自由装配。&lt;/p&gt;

&lt;p&gt;每个程序员花费半生心血所耕耘的土地，是他后半生躺着赚钱的桥梁。辛苦一生研究c语言的程序员万万没想到，这个世界还存在着只用写XML文件就能赚钱的程序员。但程序员总该明白，自己写的代码，或多或少，都传递在这个自由市场中。如今买卖的是Java Bean，很多写Java的程序员再难生存下去，这个世界，做农民提供粮食的人差不多就够了，再多，Java Bean 也就不值钱了。或许我所知的R语言、python 仍处在一个成长期，包的管理还处在平台托管的状态中。假设R不再那么开源，R包可以开始买卖，趋之若鹜的人，将不再造同样包的轮子。既然什么包都能卖，那综合一下爬虫包、表格解析包，一下子一个自动爬解析表格的包就做成了。本质上，只是利用了别人已经写好的两个组件。仔细想想，用谢大大最多的，自动生成rmarkdown,其实质也是利用了pandoc等软件，这不也是利用代码拼接的优势吗？&lt;/p&gt;

&lt;p&gt;码农，不能一辈子是码农，总要向码商，码士稍微转变一下。EJB已足以说明问题，程序的安全其实是更重要的一点，这需要更多的码士，研究出一个更为标准，并不断进化的准则，以保证程序的安全性。其次，需要更多的码商，总的来说，EJB已经有足够多的量，而实业中，缺少能够做拼接的人，Java代码写起来本身难度并不大，而更让人头疼的是极其复杂和严格的配置过程。&lt;/p&gt;

&lt;p&gt;总结本人，一分码士、三分码农、五分码商、剩下一分爱玩的心，总结起来，甚至称不上程序员，仅仅是一个简单码之学徒罢了。&lt;/p&gt;</content><author><name>冥郡</name></author><summary type="html">产生这三个概念还源于学习时，话说某日某人问我，什么EJB。我回答说，所谓EJB就是企业级的Java Bean。那什么是Java Bean呢？就是java里的咖啡豆。劈头盖脸就是一句”我当然认识Bean这个单词”，我都没意识到，原来Bean这个单词是那么简单，以致于我这样的翻译回答是在侮辱对方的智商。</summary></entry><entry><title type="html">各式排序算法及其c语言实现</title><link href="http://localhost:4000/github-io/2018-07-17/CAL-02_Sort" rel="alternate" type="text/html" title="各式排序算法及其c语言实现" /><published>2018-07-17T00:00:00+08:00</published><updated>2018-07-17T00:00:00+08:00</updated><id>http://localhost:4000/github-io/2018-07-17/CAL-02_Sort</id><content type="html" xml:base="http://localhost:4000/github-io/2018-07-17/CAL-02_Sort">&lt;h2 id=&quot;问题描述&quot;&gt;问题描述&lt;/h2&gt;

&lt;p&gt;排序算法可以说是算法的一个基础，这里在我水平范围内进行总结和归纳，并给出我自己实现的源码。&lt;/p&gt;

&lt;p&gt;以下，归纳基于比较的排序方法，因此，其运行时间上限基本都是O(nlog(n))&lt;/p&gt;

&lt;h2 id=&quot;时间对比&quot;&gt;时间对比&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;排序方法&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;平均情况&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;最好情况&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;最坏情况&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;辅助空间&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;稳定性&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;冒泡排序&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt;O(n^2)&lt;/script&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O(n)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt;O(n^2)&lt;/script&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O(1)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;稳定&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;插入排序&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt;O(n^2)&lt;/script&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O(n)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt;O(n^2)&lt;/script&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O(1)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;稳定&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;希尔排序&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt;O(nlogn)~O(n^2)&lt;/script&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt;O(n^{1.3})&lt;/script&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt;O(n^2)&lt;/script&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O(1)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;不稳定&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;堆排序&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt;O(nlogn)&lt;/script&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O(nlogn)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O(nlogn)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O(1)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;不稳定&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;归并排序&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt;O(nlogn)&lt;/script&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O(nlogn)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O(nlogn)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O(n)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;稳定&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;快速排序&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt;O(nlogn)&lt;/script&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O(nlogn)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt;O(n^2)&lt;/script&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;O(1)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;不稳定&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;程序框架&quot;&gt;程序框架&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include&amp;lt;iostream&amp;gt;
#include&amp;lt;vector&amp;gt;
using namespace std;

template &amp;lt;class T&amp;gt;
class Sort{
private:
	vector&amp;lt;T&amp;gt; arrayT;
	vector&amp;lt;T&amp;gt; temp;
public:
	Sort(){}
	Sort(vector&amp;lt;T&amp;gt; arr){
		arrayT=arr;
		temp=arr;
	}
	bool compare(T a,T b,bool arise){
		if(arise)
			return (a&amp;gt;b);
		else
			return !(a&amp;gt;b);
	}
	void swap(int i,int j){
		T temp=arrayT[i];
		arrayT[i]=arrayT[j];
		arrayT[j]=temp;
	}
	void print(){
		for(int i=0;i&amp;lt;arrayT.size();i++)
			cout&amp;lt;&amp;lt;arrayT[i]&amp;lt;&amp;lt;&quot; &quot;;
		cout&amp;lt;&amp;lt;endl;
	}
	int getSize(){return arrayT.size();}
	void bubbleSort(bool arise);//冒泡排序
	void insertSort(bool arise);//插入排序
	void quickSort(bool arise,int low,int high);//快速排序 注意这里的high指的是最后一个元素的位置坐标
	void adjustHeap(int i,int length,bool arise);//建堆
	void HeapSort(bool arise);//堆排序
	void MergeSort(int start,int end,bool arise);//归并排序
	void Merge(int start,int mid,int end,bool arise);//归并
	void ShellSort(bool arise);//希尔排序
};

//这里加入冒泡排序部分代码
//这里加入插入排序部分代码

int main(){
	int a[10]={1,3,5,7,9,2,4,6,8,0};
	vector&amp;lt;int&amp;gt; b(a, a+10);
	Sort&amp;lt;int&amp;gt; sortb(b);
	sortb.print();
	sortb.bubbleSort(true);
	sortb.print();
	for(int i=0;i&amp;lt;b.size();i++)
			cout&amp;lt;&amp;lt;b[i]&amp;lt;&amp;lt;&quot; &quot;;
		cout&amp;lt;&amp;lt;endl;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;冒泡排序&quot;&gt;冒泡排序&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;template&amp;lt;class T&amp;gt;
void Sort&amp;lt;T&amp;gt;::bubbleSort(bool arise){
	int n=arrayT.size();
	for(int i=0;i&amp;lt;n-1;i++)
		for(int j=0;j&amp;lt;n-i-1;j++)
			if(compare(arrayT[j],arrayT[j+1],arise))
				swap(j,j+1);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;插入排序&quot;&gt;插入排序&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;template&amp;lt;class T&amp;gt;
void Sort&amp;lt;T&amp;gt;::insertSort(bool arise){
	int n=arrayT.size();
	vector&amp;lt;T&amp;gt;::iterator it=arrayT.begin(),in;
	for(int it=1;it&amp;lt;n;it++){
		int flag=0;
		for(in=arrayT.begin();in!=arrayT.begin()+it;in++){
			if(compare(*in,arrayT[it],arise)){
			//找到第一个不满足比较条件的进行插入，这里外循环使用index,内循环使用迭代器与vector的结构有关
			//若外循环也使用迭代器，则会出现bug
			//原因是，在删除元素之后，vector的元素会重构，所有在erase后的元素所在的位置都会改变，所以迭代器指的位置不再是原来的位置，也就形成了空引用
				T temp=arrayT[it];
				arrayT.erase(arrayT.begin()+it);
				arrayT.insert(in,1,temp);
				break;
			}
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;快速排序&quot;&gt;快速排序&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;template&amp;lt;class T&amp;gt;
void Sort&amp;lt;T&amp;gt;::quickSort(bool arise,int low,int high){
	if(low&amp;gt;=high){
		return;
	}
	int i=low;
	int j=high;
	T temp=arrayT[i];
	while(i&amp;lt;j){
		while(i&amp;lt;j&amp;amp;&amp;amp;compare(arrayT[j],temp,arise))j--;
		arrayT[i]=arrayT[j];
		while(i&amp;lt;j&amp;amp;&amp;amp;compare(temp,arrayT[i],arise))i++;
		arrayT[j]=arrayT[i];
	}
	arrayT[i]=temp;
	quickSort(arise,low,i-1);
	quickSort(arise,i+1,high);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;堆排序&quot;&gt;堆排序&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;template&amp;lt;class T&amp;gt;
void Sort&amp;lt;T&amp;gt;::adjustHeap(int i,int length,bool arise){
	T temp=arrayT[i];
	for(int k=i*2+1;k&amp;lt;length;k=2*k+1){
		if(k+1&amp;lt;length &amp;amp;&amp;amp; compare(arrayT[k+1],arrayT[k],arise))k++;
		if(compare(arrayT[k],temp,arise)){
			arrayT[i]=arrayT[k];
			i=k;
		}else
			break;
	}
	arrayT[i]=temp;
}
template&amp;lt;class T&amp;gt;
void Sort&amp;lt;T&amp;gt;::HeapSort(bool arise){
	for(int i=arrayT.size()/2-1;i&amp;gt;=0;i--)
		adjustHeap(i,arrayT.size(),arise);
	for(int j=arrayT.size()-1;j&amp;gt;0;j--){
		swap(0,j);
		adjustHeap(0,j,arise);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;归并排序&quot;&gt;归并排序&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;template&amp;lt;class T&amp;gt;
void Sort&amp;lt;T&amp;gt;::Merge(int start,int mid,int end,bool arise){
	int i=start,j=mid+1,k=start;
	while(i!=mid+1&amp;amp;&amp;amp;j!=end+1){
		if(compare(arrayT[i],arrayT[j],arise))
			temp[k++]=arrayT[j++];
		else
			temp[k++]=arrayT[i++];
	}
	while(i!=mid+1)
		temp[k++]=arrayT[i++];
	while(j!=end+1)
		temp[k++]=arrayT[j++];
	for(i=start;i&amp;lt;=end;i++)
		arrayT[i]=temp[i];
}

template&amp;lt;class T&amp;gt;
void Sort&amp;lt;T&amp;gt;::MergeSort(int start,int end,bool arise){
	int mid;
	if(start&amp;lt;end){
		mid=(start+end)/2;
		MergeSort(start,mid,arise);
		MergeSort(mid+1,end,arise);
		Merge(start,mid,end,arise);
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;希尔排序&quot;&gt;希尔排序&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;template&amp;lt;class T&amp;gt;
void Sort&amp;lt;T&amp;gt;::ShellSort(bool arise){
	int len=arrayT.size();
	for(int div=len/2;div&amp;gt;=1;div=div/2)
		for(int i=0;i&amp;lt;=div;i++)
			for(int j=i;j&amp;lt;len-div;j+=div)
				for(int k=j;k&amp;lt;len;k+=div)
					if(compare(arrayT[j],arrayT[k],arise))
						swap(j,k);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>冥郡</name></author><summary type="html">问题描述</summary></entry><entry><title type="html">markdown</title><link href="http://localhost:4000/github-io/2018-07-16/other-01-mathjax_cmdeditor" rel="alternate" type="text/html" title="markdown" /><published>2018-07-16T00:00:00+08:00</published><updated>2018-07-16T00:00:00+08:00</updated><id>http://localhost:4000/github-io/2018-07-16/other-01-mathjax_cmdeditor</id><content type="html" xml:base="http://localhost:4000/github-io/2018-07-16/other-01-mathjax_cmdeditor">&lt;hr /&gt;

&lt;p&gt;#Cmd Markdown 公式指导手册&lt;/p&gt;

&lt;p&gt;标签： Tutorial&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;2018-03-20 补档：
收到很多小伙伴对本文的源文档转载需求，故传了一份 md 文件，请按需 &lt;a href=&quot;http://file.ericp.cn/work/mathjax_cmdeditor.md&quot;&gt;下载&lt;/a&gt; 。
本文固定链接: https://www.zybuluo.com/codeep/note/163962&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;blockquote&gt;
  &lt;p&gt;点击跳转至 &lt;a href=&quot;https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown&quot;&gt;Cmd Markdown 简明语法手册&lt;/a&gt; ，立刻开始 Cmd Markdown 编辑阅读器的记录和写作之旅！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;本文为 MathJax 在 Cmd Markdown 环境下的语法指引。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Cmd Markdown 编辑阅读器支持 $\LaTeX$ 编辑显示支持，例如：$\sum_{i=1}^n a_i=0$，访问 &lt;a href=&quot;http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference&quot;&gt;MathJax&lt;/a&gt; 以参考更多使用方法。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;右键点击每一个公式，选择 &lt;strong&gt;[Show Math As] → [TeX Commands]&lt;/strong&gt; 以查看该公式的命令详情。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;[TOC]&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;一公式使用参考&quot;&gt;一、公式使用参考&lt;/h1&gt;

&lt;h2 id=&quot;1如何插入公式&quot;&gt;1．如何插入公式&lt;/h2&gt;

&lt;p&gt;$\LaTeX$ 的数学公式有两种：行中公式和独立公式。行中公式放在文中与其它文字混编，独立公式单独成行。&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;行中公式可以用如下方法表示：&lt;/dt&gt;
  &lt;dd&gt;
    &lt;p&gt;$ 数学公式 $&lt;/p&gt;
  &lt;/dd&gt;
  &lt;dt&gt;独立公式可以用如下方法表示：&lt;/dt&gt;
  &lt;dd&gt;
    &lt;script type=&quot;math/tex; mode=display&quot;&gt;数学公式&lt;/script&gt;
  &lt;/dd&gt;
  &lt;dt&gt;自动编号的公式可以用如下方法表示：&lt;/dt&gt;
  &lt;dd&gt;若需要手动编号，参见 &lt;a href=&quot;#14大括号和行标的使用&quot;&gt;大括号和行标的使用&lt;/a&gt; 。&lt;/dd&gt;
  &lt;dd&gt;
    &lt;p&gt;\begin{equation}
数学公式
\label{eq:当前公式名}
\end{equation}&lt;/p&gt;
  &lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;&lt;strong&gt;自动编号后的公式可在全文任意处使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;\eqref{eq:公式名}&lt;/code&gt; 语句引用。&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;例子：
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ J_\alpha(x) = \sum_{m=0}^\infty \frac{(-1)^m}{m! \Gamma (m + \alpha + 1)} {\left({ \frac{x}{2} }\right)}^{2m + \alpha} \text {，行内公式示例} $
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;显示：$ J_\alpha(x) = \sum_{m=0}^\infty \frac{(-1)^m}{m! \Gamma (m + \alpha + 1)} {\left({ \frac{x}{2} }\right)}^{2m + \alpha} \text {，行内公式示例} $&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;例子：
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$$ J_\alpha(x) = \sum_{m=0}^\infty \frac{(-1)^m}{m! \Gamma (m + \alpha + 1)} {\left({ \frac{x}{2} }\right)}^{2m + \alpha} \text {，独立公式示例} $$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;显示：&lt;script type=&quot;math/tex&quot;&gt;J_\alpha(x) = \sum_{m=0}^\infty \frac{(-1)^m}{m! \Gamma (m + \alpha + 1)} {\left({ \frac{x}{2} }\right)}^{2m + \alpha} \text {，独立公式示例}&lt;/script&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;例子：
```
在公式 \eqref{eq:sample} 中，我们看到了这个被自动编号的公式。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;\begin{equation}
E=mc^2 \text{，自动编号公式示例}
\label{eq:Sample}
\end{equation}&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
- 显示：

$$在公式 \eqref{eq:sample} 中，我们看到了这个被自动编号的公式。$$

\begin{equation}
E=mc^2 \text{，自动编号公式示例}
\label{eq:sample}
\end{equation}

##2．如何输入上下标

`^` 表示上标, `_` 表示下标。如果上下标的内容多于一个字符，需要用 `{}` 将这些内容括成一个整体。上下标可以嵌套，也可以同时使用。

- 例子：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;x^{y^z}=(1+{\rm e}^x)^{-2xy^w}&lt;/script&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
- 显示：$$ x^{y^z}=(1+{\rm e}^x)^{-2xy^w} $$

另外，如果要在左右两边都有上下标，可以用 `\sideset` 命令。

- 例子：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;\sideset{^1_2}{^3_4}\bigotimes&lt;/script&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- 显示：$$\sideset{^1_2}{^3_4}\bigotimes$$

##3．如何输入括号和分隔符

`()`、`[]` 和 `|` 表示符号本身，使用 `\{\}` 来表示 `{}` 。当要显示大号的括号或分隔符时，要用 `\left` 和 `\right` 命令。

一些特殊的括号：
|输入|显示|输入|显示|
|:--:|:--:|:--:|:--:|
|\langle|$\langle$|\rangle|$\rangle$|
|\lceil|$\lceil$|\rceil|$\rceil$|
|\lfloor|$\lfloor$|\rfloor|$\rfloor$|
|\lbrace|$\lbrace$|\rbrace|$\rbrace$|


- 例子：

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;f(x,y,z) = 3y^2z \left( 3+\frac{7x+5}{1+y^2} \right)&lt;/script&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;

##4．如何输入分数

通常使用 `\frac {分子} {分母}` 命令产生一个分数，分数可嵌套。
便捷情况可直接输入 `\frac ab` 来快速生成一个 $\frac ab$ 。
如果分式很复杂，亦可使用 `分子 \over 分母` 命令，此时分数仅有一层。

- 例子：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;\frac{a-1}{b-1} \quad and \quad {a+1\over b+1}&lt;/script&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- 显示：$$\frac{a-1}{b-1} \quad and \quad {a+1\over b+1}$$

##5．如何输入开方

使用 `\sqrt [根指数，省略时为2] {被开方数}` 命令输入开方。

- 例子：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;\sqrt{2} \quad and \quad \sqrt[n]{3}&lt;/script&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- 显示：$$\sqrt{2} \quad and \quad \sqrt[n]{3}$$

##6．如何输入省略号

数学公式中常见的省略号有两种，`\ldots` 表示与文本底线对齐的省略号，`\cdots` 表示与文本中线对齐的省略号。

- 例子：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;f(x_1,x_2,\underbrace{\ldots}_{\rm ldots} ,x_n) = x_1^2 + x_2^2 + \underbrace{\cdots}_{\rm cdots} + x_n^2&lt;/script&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- 显示：$$f(x_1,x_2,\underbrace{\ldots}_{\rm ldots} ,x_n) = x_1^2 + x_2^2 + \underbrace{\cdots}_{\rm cdots} + x_n^2$$

##7．如何输入矢量

使用 `\vec{矢量}` 来自动产生一个矢量。也可以使用 `\overrightarrow` 等命令自定义字母上方的符号。

- 例子：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;\vec{a} \cdot \vec{b}=0&lt;/script&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
- 显示：$$\vec{a} \cdot \vec{b}=0$$

- 例子：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;\overleftarrow{xy} \quad and \quad \overleftrightarrow{xy} \quad and \quad \overrightarrow{xy}&lt;/script&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- 显示：$$\overleftarrow{xy} \quad and \quad \overleftrightarrow{xy} \quad and \quad \overrightarrow{xy}$$

##8．如何输入积分

使用 `\int_积分下限^积分上限 {被积表达式}` 来输入一个积分。

例子：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;\int_0^1 {x^2} \,{\rm d}x&lt;/script&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;显示：$$\int_0^1 {x^2} \,{\rm d}x$$

本例中 `\,` 和 `{\rm d}` 部分可省略，但建议加入，能使式子更美观。

##9．如何输入极限运算

使用 `\lim_{变量 \to 表达式} 表达式` 来输入一个极限。如有需求，可以更改 `\to` 符号至任意符号。

例子：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;\lim_{n \to +\infty} \frac{1}{n(n+1)} \quad and \quad \lim_{x\leftarrow{示例}} \frac{1}{n(n+1)}&lt;/script&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;

显示：$$\lim_{n \to +\infty} \frac{1}{n(n+1)} \quad and \quad \lim_{x\leftarrow{示例}} \frac{1}{n(n+1)}$$

##10．如何输入累加、累乘运算

使用 `\sum_{下标表达式}^{上标表达式} {累加表达式}` 来输入一个累加。
与之类似，使用 `\prod` `\bigcup` `\bigcap` 来分别输入累乘、并集和交集。
此类符号在行内显示时上下标表达式将会移至右上角和右下角。

- 例子：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;\sum_{i=1}^n \frac{1}{i^2} \quad and \quad \prod_{i=1}^n \frac{1}{i^2} \quad and \quad \bigcup_{i=1}^{2} R&lt;/script&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
- 显示：$$\sum_{i=1}^n \frac{1}{i^2} \quad and \quad \prod_{i=1}^n \frac{1}{i^2} \quad and \quad \bigcup_{i=1}^{2} R$$

##11．如何输入希腊字母

输入 `\小写希腊字母英文全称` 和 `\首字母大写希腊字母英文全称` 来分别输入小写和大写希腊字母。
**对于大写希腊字母与现有字母相同的，直接输入大写字母即可。**

|输入|显示|输入|显示|输入|显示|输入|显示|
|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|
|\alpha|$\alpha$|A|$A$|\beta|$\beta$|B|$B$|
|\gamma|$\gamma$|\Gamma|$\Gamma$|\delta|$\delta$|\Delta|$\Delta$|
|\epsilon|$\epsilon$|E|$E$|\zeta|$\zeta$|Z|$Z$|
|\eta|$\eta$|H|$H$|\theta|$\theta$|\Theta|$\Theta$|
|\iota|$\iota$|I|$I$|\kappa|$\kappa$|K|$K$|
|\lambda|$\lambda$|\Lambda|$\Lambda$|\mu|$\mu$|M|$M$|
|\nu|$\nu$|N|$N$|\xi|$\xi$|\Xi|$\Xi$|
|o|$o$|O|$O$|\pi|$\pi$|\Pi|$\Pi$|
|\rho|$\rho$|P|$P$|\sigma|$\sigma$|\Sigma|$\Sigma$|
|\tau|$\tau$|T|$T$|\upsilon|$\upsilon$|\Upsilon|$\Upsilon$|
|\phi|$\phi$|\Phi|$\Phi$|\chi|$\chi$|X|$X$|
|\psi|$\psi$|\Psi|$\Psi$|\omega|$\omega$|\Omega|$\Omega$|

**部分字母有变量专用形式，以 `\var-` 开头。**

|小写形式|大写形式|变量形式|显示|
|:--:|:--:|:--:|:--:|
|\epsilon|E|\varepsilon|$\epsilon \mid E \mid \varepsilon$|
|\theta|\Theta|\vartheta|$\theta \mid \Theta \mid \vartheta$|
|\rho|P|\varrho|$\rho \mid P \mid \varrho$|
|\sigma|\Sigma|\varsigma|$\sigma \mid \Sigma \mid \varsigma$|
|\phi|\Phi|\varphi|$\phi \mid \Phi \mid \varphi$|

##12．如何输入其它特殊字符

&amp;gt; **若需要显示更大或更小的字符，在符号前插入 `\large` 或 `\small` 命令。**

&amp;gt; 若找不到需要的符号，使用 [$\rm{Detexify^2}$](http://detexify.kirelabs.org/classify.html) 来画出想要的符号。

&amp;gt; ![Detexify^2](http://i.stack.imgur.com/ScK3R.png)

###(1)．关系运算符

|输入|显示|输入|显示|输入|显示|输入|显示|
|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|
|\pm|$\pm$|\times|$\times$|\div|$\div$|\mid|$\mid$|
|\nmid|$\nmid$|\cdot|$\cdot$|\circ|$\circ$|\ast|$\ast$|
|\bigodot|$\bigodot$|\bigotimes|$\bigotimes$|\bigoplus|$\bigoplus$|\leq|$\leq$|
|\geq|$\geq$|\neq|$\neq$|\approx|$\approx$|\equiv|$\equiv$|
|\sum|$\sum$|\prod|$\prod$|\coprod|$\coprod$|\backslash|$\backslash$|

###(2)．集合运算符

|输入|显示|输入|显示|输入|显示|
|:--:|:--:|:--:|:--:|:--:|:--:|
|\emptyset|$\emptyset$|\in|$\in$|\notin|$\notin$|
|\subset|$\subset$|\supset|$\supset$|\subseteq|$\subseteq$|
|\supseteq|$\supseteq$|\bigcap|$\bigcap$|\bigcup|$\bigcup$|
|\bigvee|$\bigvee$|\bigwedge|$\bigwedge$|\biguplus|$\biguplus$|

###(3)．对数运算符

|输入|显示|输入|显示|输入|显示|
|:--:|:--:|:--:|:--:|:--:|:--:|
|\log|$\log$|\lg|$\lg$|\ln|$\ln$|

###(4)．三角运算符

|输入|显示|输入|显示|输入|显示|
|:--:|:--:|:--:|:--:|:--:|:--:|
|30^\circ|$30^\circ$|\bot|$\bot$|\angle A|$\angle A$|
|\sin|$\sin$|\cos|$\cos$|\tan|$\tan$|
|\csc|$\csc$|\sec|$\sec$|\cot|$\cot$|

###(5)．微积分运算符

|输入|显示|输入|显示|输入|显示|
|:--:|:--:|:--:|:--:|:--:|:--:|
|\int|$\int$|\iint|$\iint$|\iiint|$\iiint$|
|\iiiint|$\iiiint$|\oint|$\oint$|\prime|$\prime$|
|\lim|$\lim$|\infty|$\infty$|\nabla|$\nabla$|

###(6)．逻辑运算符

|输入|显示|输入|显示|输入|显示|
|:--:|:--:|:--:|:--:|:--:|:--:|
|\because|$\because$|\therefore|$\therefore$|
|\forall|$\forall$|\exists|$\exists$|\not\subset|$\not\subset$|
|\not&amp;lt;|$\not&amp;lt;$|\not&amp;gt;|$\not&amp;gt;$|\not=|$\not=$|

###(7)．戴帽符号

|输入|显示|输入|显示|
|:--:|:--:|:--:|:--:|
|\hat{xy}|$\hat{xy}$|\widehat{xyz}|$\widehat{xyz}$|
|\tilde{xy}|$\tilde{xy}$|\widetilde{xyz}|$\widetilde{xyz}$|
|\check{x}|$\check{x}$|\breve{y}|$\breve{y}$|
|\grave{x}|$\grave{x}$|\acute{y}|$\acute{y}$|



###(8)．连线符号
|输入|显示|
|:--:|:--:|
|\fbox{a+b+c+d}|$\fbox{a+b+c+d}$|
|\overleftarrow{a+b+c+d}|$\overleftarrow{a+b+c+d}$|
|\overrightarrow{a+b+c+d}|$\overrightarrow{a+b+c+d}$|
|\overleftrightarrow{a+b+c+d}|$\overleftrightarrow{a+b+c+d}$|
|\underleftarrow{a+b+c+d}|$\underleftarrow{a+b+c+d}$|
|\underrightarrow{a+b+c+d}|$\underrightarrow{a+b+c+d}$|
|\underleftrightarrow{a+b+c+d}|$\underleftrightarrow{a+b+c+d}$|
|\overline{a+b+c+d}|$\overline{a+b+c+d}$|
|\underline{a+b+c+d}|$\underline{a+b+c+d}$|
|\overbrace{a+b+c+d}^{Sample}|$\overbrace{a+b+c+d}^{Sample}$|
|\underbrace{a+b+c+d}_{Sample}|$\underbrace{a+b+c+d}_{Sample}$|
|\overbrace{a+\underbrace{b+c}_{1.0}+d}^{2.0}|$\overbrace{a+\underbrace{b+c}_{1.0}+d}^{2.0}$|
|\underbrace{a\cdot a\cdots a}_{b\text{ times}}|$\underbrace{a\cdot a\cdots a}_{b\text{ times}}$|

###(9)．箭头符号

- 推荐使用符号：
|输入|显示|输入|显示|输入|显示|
|:--:|:--:|:--:|:--:|:--:|:--:|
|\to|$\to$|\mapsto|$\mapsto$|
|\implies|$\implies$|\iff|$\iff$|\impliedby|$\impliedby$|


- 其它可用符号：
|输入|显示|输入|显示|
|:--:|:--:|:--:|:--:|
|\uparrow|$\uparrow$|\Uparrow|$\Uparrow$|
|\downarrow|$\downarrow$|\Downarrow|$\Downarrow$|
|\leftarrow|$\leftarrow$|\Leftarrow|$\Leftarrow$|
|\rightarrow|$\rightarrow$|\Rightarrow|$\Rightarrow$|
|\leftrightarrow|$\leftrightarrow$|\Leftrightarrow|$\Leftrightarrow$|
|\longleftarrow|$\longleftarrow$|\Longleftarrow|$\Longleftarrow$|
|\longrightarrow|$\longrightarrow$|\Longrightarrow|$\Longrightarrow$|
|\longleftrightarrow|$\longleftrightarrow$|\Longleftrightarrow|$\Longleftrightarrow$|

##13．如何进行字体转换

若要对公式的某一部分字符进行字体转换，可以用 `{\字体 {需转换的部分字符}}` 命令，其中 `\字体` 部分可以参照下表选择合适的字体。一般情况下，公式默认为意大利体 $italic$ 。

示例中 **全部大写** 的字体仅大写可用。

|输入|说明|显示|输入|说明|显示|
|:--:|:--:|:--:|:--:|:--:|:--:|:--:|
|\rm|罗马体|$\rm{Sample}$|\cal|花体|$\cal{SAMPLE}$|
|\it|意大利体|$\it{Sample}$|\Bbb|黑板粗体|$\Bbb{SAMPLE}$|
|\bf|粗体|$\bf{Sample}$|\mit|数学斜体|$\mit{SAMPLE}$|
|\sf|等线体|$\sf{Sample}$|\scr|手写体|$\scr{SAMPLE}$|
|\tt|打字机体|$\tt{Sample}$|
|\frak|旧德式字体|$\frak{Sample}$|


转换字体十分常用，例如在积分中：

- 例子：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;\begin{array}{cc}
\mathrm{Bad} &amp;amp; \mathrm{Better} &lt;br /&gt;
\hline &lt;br /&gt;
\int_0^1 x^2 dx &amp;amp; \int_0^1 x^2 \,{\rm d}x
\end{array}&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
- 显示：
\begin{array}{cc}
\mathrm{Bad} &amp;amp; \mathrm{Better} \\
\hline \\
\int_0^1 x^2 dx &amp;amp; \int_0^1 x^2 \,{\rm d}x
\end{array}

注意比较两个式子间 $dx$ 与 ${\rm d} x$ 的不同。
使用 `\operatorname` 命令也可以达到相同的效果，详见 [定义新的符号 \operatorname](#1定义新的符号-operatorname) 。

##14．大括号和行标的使用

使用 `\left` 和 `\right` 来创建自动匹配高度的 (圆括号)，[方括号] 和 {花括号} 。
在每个公式末尾前使用 `\tag{行标}` 来实现行标。

- 例子：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;f\left(
   \left[ 
     \frac{
       1+\left\{x,y\right\}
     }{
       \left(
          \frac{x}{y}+\frac{y}{x}
       \right)
       \left(u+1\right)
     }+a
   \right]^{3/2}
\right)
\tag{行标}&lt;/script&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
- 显示：
$$
f\left(
   \left[ 
     \frac{
       1+\left\{x,y\right\}
     }{
       \left(
          \frac{x}{y}+\frac{y}{x}
       \right)
       \left(u+1\right)
     }+a
   \right]^{3/2}
\right)
\tag{行标}
$$

如果你需要在不同的行显示对应括号，可以在每一行对应处使用 `\left.` 或 `\right.` 来放一个&quot;影子&quot;括号：

- 例子：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\begin{aligned}
a=&amp;\left(1+2+3+  \cdots \right. \\
&amp; \cdots+ \left. \infty-2+\infty-1+\infty\right)
\end{aligned} %]]&gt;&lt;/script&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
- 显示：
$$
\begin{aligned}
a=&amp;amp;\left(1+2+3+  \cdots \right. \\
&amp;amp; \cdots+ \left. \infty-2+\infty-1+\infty\right)
\end{aligned}
$$

如果你需要将行内显示的分隔符也变大，可以使用 `\middle` 命令：

- 例子：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;\left\langle  
  q
\middle\|
  \frac{\frac{x}{y}}{\frac{u}{v}}
\middle| 
   p 
\right\rangle&lt;/script&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
- 显示：
$$
\left\langle  
  q
\middle\|
  \frac{\frac{x}{y}}{\frac{u}{v}}
\middle| 
   p 
\right\rangle
$$

##15．其它命令

###(1)．定义新的符号 \operatorname

查询 [关于此命令的定义](http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference/15077#15077) 和 [关于此命令的讨论](http://meta.math.stackexchange.com/search?q=operatorname) 来进一步了解此命令。

- 例子： 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;\operatorname{Symbol} A&lt;/script&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
- 显示： $$\operatorname{Symbol} A$$

###(2)．添加注释文字 \text

在 `\text {文字}` 中仍可以使用 `$公式$` 插入其它公式。

- 例子：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
f(n)= \begin{cases} n/2, &amp; \text {if $n$ is even} \\ 3n+1, &amp; \text{if $n$ is odd} \end{cases} %]]&gt;&lt;/script&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
- 显示：
$$ f(n)= \begin{cases} n/2, &amp;amp; \text {if $n$ is even} \\ 3n+1, &amp;amp; \text{if $n$ is odd} \end{cases} $$

###(3)．在字符间加入空格

有四种宽度的空格可以使用： `\,`、`\;`、`\quad` 和 `\qquad` 。

- 例子：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;a \, b \mid a \; b \mid a \quad b \mid a \qquad b&lt;/script&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
- 显示：$$ a \, b \mid a \; b \mid a \quad b \mid a \qquad b $$

当然，使用 `\text {n个空格}` 也可以达到同样效果。

###(4)．更改文字颜色

使用 `\color{颜色}{文字}` 来更改特定的文字颜色。
更改文字颜色 **需要浏览器支持** ，如果浏览器不知道你所需的颜色，那么文字将被渲染为黑色。

对于较旧的浏览器（HTML4与CSS2），以下颜色是被支持的：

|输入|显示|输入|显示|
|:--:|:--:|:--:|:--:|
|black|$\color{black}{text}$|grey|$\color{grey}{text}$|
|silver|$\color{silver}{text}$|white|$\color{white}{text}$|
|maroon|$\color{maroon}{text}$|red|$\color{red}{text}$|
|yellow|$\color{yellow}{text}$|lime|$\color{lime}{text}$|
|olive|$\color{olive}{text}$|green|$\color{green}{text}$|
|teal|$\color{teal}{text}$|auqa|$\color{auqa}{text}$|
|blue|$\color{blue}{text}$|navy|$\color{navy}{text}$|
|purple|$\color{purple}{text}$|fuchsia|$\color{fuchsia}{text}$|

对于较新的浏览器（HTML5与CSS3），额外的124种颜色将被支持：

输入 `\color {#rgb} {text}` 来自定义更多的颜色，其中 `#rgb` 的 `r` `g` `b` 可输入 `0-9` 和 `a-f` 来表示红色、绿色和蓝色的纯度（饱和度）。

- 例子：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;\begin{array}{|rrrrrrrr|}\hline
\verb+#000+ &amp;amp; \color{#000}{text} &amp;amp; &amp;amp; &amp;amp;
\verb+#00F+ &amp;amp; \color{#00F}{text} &amp;amp; &amp;amp; &lt;br /&gt;
&amp;amp; &amp;amp; \verb+#0F0+ &amp;amp; \color{#0F0}{text} &amp;amp;
&amp;amp; &amp;amp; \verb+#0FF+ &amp;amp; \color{#0FF}{text}&lt;br /&gt;
\verb+#F00+ &amp;amp; \color{#F00}{text} &amp;amp; &amp;amp; &amp;amp;
\verb+#F0F+ &amp;amp; \color{#F0F}{text} &amp;amp; &amp;amp; &lt;br /&gt;
&amp;amp; &amp;amp; \verb+#FF0+ &amp;amp; \color{#FF0}{text} &amp;amp;
&amp;amp; &amp;amp; \verb+#FFF+ &amp;amp; \color{#FFF}{text}&lt;br /&gt;
\hline
\end{array}&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
- 显示：
\begin{array}{|rrrrrrrr|}\hline
\verb+#000+ &amp;amp; \color{#000}{text} &amp;amp; &amp;amp; &amp;amp;
\verb+#00F+ &amp;amp; \color{#00F}{text} &amp;amp; &amp;amp; \\
&amp;amp; &amp;amp; \verb+#0F0+ &amp;amp; \color{#0F0}{text} &amp;amp;
&amp;amp; &amp;amp; \verb+#0FF+ &amp;amp; \color{#0FF}{text}\\
\verb+#F00+ &amp;amp; \color{#F00}{text} &amp;amp; &amp;amp; &amp;amp;
\verb+#F0F+ &amp;amp; \color{#F0F}{text} &amp;amp; &amp;amp; \\
&amp;amp; &amp;amp; \verb+#FF0+ &amp;amp; \color{#FF0}{text} &amp;amp;
&amp;amp; &amp;amp; \verb+#FFF+ &amp;amp; \color{#FFF}{text}\\
\hline
\end{array}

- 例子：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;\begin{array}{|rrrrrrrr|}
\hline
\verb+#000+ &amp;amp; \color{#000}{text} &amp;amp; \verb+#005+ &amp;amp; \color{#005}{text} &amp;amp; \verb+#00A+ &amp;amp; \color{#00A}{text} &amp;amp; \verb+#00F+ &amp;amp; \color{#00F}{text}  &lt;br /&gt;
\verb+#500+ &amp;amp; \color{#500}{text} &amp;amp; \verb+#505+ &amp;amp; \color{#505}{text} &amp;amp; \verb+#50A+ &amp;amp; \color{#50A}{text} &amp;amp; \verb+#50F+ &amp;amp; \color{#50F}{text}  &lt;br /&gt;
\verb+#A00+ &amp;amp; \color{#A00}{text} &amp;amp; \verb+#A05+ &amp;amp; \color{#A05}{text} &amp;amp; \verb+#A0A+ &amp;amp; \color{#A0A}{text} &amp;amp; \verb+#A0F+ &amp;amp; \color{#A0F}{text}  &lt;br /&gt;
\verb+#F00+ &amp;amp; \color{#F00}{text} &amp;amp; \verb+#F05+ &amp;amp; \color{#F05}{text} &amp;amp; \verb+#F0A+ &amp;amp; \color{#F0A}{text} &amp;amp; \verb+#F0F+ &amp;amp; \color{#F0F}{text}  &lt;br /&gt;
\hline
\verb+#080+ &amp;amp; \color{#080}{text} &amp;amp; \verb+#085+ &amp;amp; \color{#085}{text} &amp;amp; \verb+#08A+ &amp;amp; \color{#08A}{text} &amp;amp; \verb+#08F+ &amp;amp; \color{#08F}{text}  &lt;br /&gt;
\verb+#580+ &amp;amp; \color{#580}{text} &amp;amp; \verb+#585+ &amp;amp; \color{#585}{text} &amp;amp; \verb+#58A+ &amp;amp; \color{#58A}{text} &amp;amp; \verb+#58F+ &amp;amp; \color{#58F}{text}  &lt;br /&gt;
\verb+#A80+ &amp;amp; \color{#A80}{text} &amp;amp; \verb+#A85+ &amp;amp; \color{#A85}{text} &amp;amp; \verb+#A8A+ &amp;amp; \color{#A8A}{text} &amp;amp; \verb+#A8F+ &amp;amp; \color{#A8F}{text}  &lt;br /&gt;
\verb+#F80+ &amp;amp; \color{#F80}{text} &amp;amp; \verb+#F85+ &amp;amp; \color{#F85}{text} &amp;amp; \verb+#F8A+ &amp;amp; \color{#F8A}{text} &amp;amp; \verb+#F8F+ &amp;amp; \color{#F8F}{text}  &lt;br /&gt;
\hline
\verb+#0F0+ &amp;amp; \color{#0F0}{text} &amp;amp; \verb+#0F5+ &amp;amp; \color{#0F5}{text} &amp;amp; \verb+#0FA+ &amp;amp; \color{#0FA}{text} &amp;amp; \verb+#0FF+ &amp;amp; \color{#0FF}{text}  &lt;br /&gt;
\verb+#5F0+ &amp;amp; \color{#5F0}{text} &amp;amp; \verb+#5F5+ &amp;amp; \color{#5F5}{text} &amp;amp; \verb+#5FA+ &amp;amp; \color{#5FA}{text} &amp;amp; \verb+#5FF+ &amp;amp; \color{#5FF}{text}  &lt;br /&gt;
\verb+#AF0+ &amp;amp; \color{#AF0}{text} &amp;amp; \verb+#AF5+ &amp;amp; \color{#AF5}{text} &amp;amp; \verb+#AFA+ &amp;amp; \color{#AFA}{text} &amp;amp; \verb+#AFF+ &amp;amp; \color{#AFF}{text}  &lt;br /&gt;
\verb+#FF0+ &amp;amp; \color{#FF0}{text} &amp;amp; \verb+#FF5+ &amp;amp; \color{#FF5}{text} &amp;amp; \verb+#FFA+ &amp;amp; \color{#FFA}{text} &amp;amp; \verb+#FFF+ &amp;amp; \color{#FFF}{text}  &lt;br /&gt;
\hline
\end{array}&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
- 显示：
\begin{array}{|rrrrrrrr|}
\hline
\verb+#000+ &amp;amp; \color{#000}{text} &amp;amp; \verb+#005+ &amp;amp; \color{#005}{text} &amp;amp; \verb+#00A+ &amp;amp; \color{#00A}{text} &amp;amp; \verb+#00F+ &amp;amp; \color{#00F}{text}  \\
\verb+#500+ &amp;amp; \color{#500}{text} &amp;amp; \verb+#505+ &amp;amp; \color{#505}{text} &amp;amp; \verb+#50A+ &amp;amp; \color{#50A}{text} &amp;amp; \verb+#50F+ &amp;amp; \color{#50F}{text}  \\
\verb+#A00+ &amp;amp; \color{#A00}{text} &amp;amp; \verb+#A05+ &amp;amp; \color{#A05}{text} &amp;amp; \verb+#A0A+ &amp;amp; \color{#A0A}{text} &amp;amp; \verb+#A0F+ &amp;amp; \color{#A0F}{text}  \\
\verb+#F00+ &amp;amp; \color{#F00}{text} &amp;amp; \verb+#F05+ &amp;amp; \color{#F05}{text} &amp;amp; \verb+#F0A+ &amp;amp; \color{#F0A}{text} &amp;amp; \verb+#F0F+ &amp;amp; \color{#F0F}{text}  \\
\hline
\verb+#080+ &amp;amp; \color{#080}{text} &amp;amp; \verb+#085+ &amp;amp; \color{#085}{text} &amp;amp; \verb+#08A+ &amp;amp; \color{#08A}{text} &amp;amp; \verb+#08F+ &amp;amp; \color{#08F}{text}  \\
\verb+#580+ &amp;amp; \color{#580}{text} &amp;amp; \verb+#585+ &amp;amp; \color{#585}{text} &amp;amp; \verb+#58A+ &amp;amp; \color{#58A}{text} &amp;amp; \verb+#58F+ &amp;amp; \color{#58F}{text}  \\
\verb+#A80+ &amp;amp; \color{#A80}{text} &amp;amp; \verb+#A85+ &amp;amp; \color{#A85}{text} &amp;amp; \verb+#A8A+ &amp;amp; \color{#A8A}{text} &amp;amp; \verb+#A8F+ &amp;amp; \color{#A8F}{text}  \\
\verb+#F80+ &amp;amp; \color{#F80}{text} &amp;amp; \verb+#F85+ &amp;amp; \color{#F85}{text} &amp;amp; \verb+#F8A+ &amp;amp; \color{#F8A}{text} &amp;amp; \verb+#F8F+ &amp;amp; \color{#F8F}{text}  \\
\hline
\verb+#0F0+ &amp;amp; \color{#0F0}{text} &amp;amp; \verb+#0F5+ &amp;amp; \color{#0F5}{text} &amp;amp; \verb+#0FA+ &amp;amp; \color{#0FA}{text} &amp;amp; \verb+#0FF+ &amp;amp; \color{#0FF}{text}  \\
\verb+#5F0+ &amp;amp; \color{#5F0}{text} &amp;amp; \verb+#5F5+ &amp;amp; \color{#5F5}{text} &amp;amp; \verb+#5FA+ &amp;amp; \color{#5FA}{text} &amp;amp; \verb+#5FF+ &amp;amp; \color{#5FF}{text}  \\
\verb+#AF0+ &amp;amp; \color{#AF0}{text} &amp;amp; \verb+#AF5+ &amp;amp; \color{#AF5}{text} &amp;amp; \verb+#AFA+ &amp;amp; \color{#AFA}{text} &amp;amp; \verb+#AFF+ &amp;amp; \color{#AFF}{text}  \\
\verb+#FF0+ &amp;amp; \color{#FF0}{text} &amp;amp; \verb+#FF5+ &amp;amp; \color{#FF5}{text} &amp;amp; \verb+#FFA+ &amp;amp; \color{#FFA}{text} &amp;amp; \verb+#FFF+ &amp;amp; \color{#FFF}{text}  \\
\hline
\end{array}

###(5)．添加删除线

使用删除线功能必须声明 `$$` 符号。

在公式内使用 `\require{cancel}` 来允许 **片段删除线** 的显示。
声明片段删除线后，使用 `\cancel{字符}`、`\bcancel{字符}`、`\xcancel{字符}` 和 `\cancelto{字符}` 来实现各种片段删除线效果。

- 例子：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\require{cancel}\begin{array}{rl}
\verb|y+\cancel{x}| &amp; y+\cancel{x}\\
\verb|\cancel{y+x}| &amp; \cancel{y+x}\\
\verb|y+\bcancel{x}| &amp; y+\bcancel{x}\\
\verb|y+\xcancel{x}| &amp; y+\xcancel{x}\\
\verb|y+\cancelto{0}{x}| &amp; y+\cancelto{0}{x}\\
\verb+\frac{1\cancel9}{\cancel95} = \frac15+&amp; \frac{1\cancel9}{\cancel95} = \frac15 \\
\end{array} %]]&gt;&lt;/script&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
- 显示：
$$
\require{cancel}
\begin{array}{rl}
\verb|y+\cancel{x}| &amp;amp; y+\cancel{x}\\
\verb|\cancel{y+x}| &amp;amp; \cancel{y+x}\\
\verb|y+\bcancel{x}| &amp;amp; y+\bcancel{x}\\
\verb|y+\xcancel{x}| &amp;amp; y+\xcancel{x}\\
\verb|y+\cancelto{0}{x}| &amp;amp; y+\cancelto{0}{x}\\
\verb+\frac{1\cancel9}{\cancel95} = \frac15+&amp;amp; \frac{1\cancel9}{\cancel95} = \frac15 \\
\end{array}
$$

使用 `\require{enclose}` 来允许 **整段删除线** 的显示。
声明整段删除线后，使用 `\enclose{删除线效果}{字符}` 来实现各种整段删除线效果。
其中，删除线效果有 `horizontalstrike`、`verticalstrike`、`updiagonalstrike` 和 `downdiagonalstrike`，可叠加使用。

- 例子：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\require{enclose}\begin{array}{rl}
\verb|\enclose{horizontalstrike}{x+y}| &amp; \enclose{horizontalstrike}{x+y}\\
\verb|\enclose{verticalstrike}{\frac xy}| &amp; \enclose{verticalstrike}{\frac xy}\\
\verb|\enclose{updiagonalstrike}{x+y}| &amp; \enclose{updiagonalstrike}{x+y}\\
\verb|\enclose{downdiagonalstrike}{x+y}| &amp; \enclose{downdiagonalstrike}{x+y}\\
\verb|\enclose{horizontalstrike,updiagonalstrike}{x+y}| &amp; \enclose{horizontalstrike,updiagonalstrike}{x+y}\\
\end{array} %]]&gt;&lt;/script&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
- 显示：
$$
\require{enclose}\begin{array}{rl}
\verb|\enclose{horizontalstrike}{x+y}| &amp;amp; \enclose{horizontalstrike}{x+y}\\
\verb|\enclose{verticalstrike}{\frac xy}| &amp;amp; \enclose{verticalstrike}{\frac xy}\\
\verb|\enclose{updiagonalstrike}{x+y}| &amp;amp; \enclose{updiagonalstrike}{x+y}\\
\verb|\enclose{downdiagonalstrike}{x+y}| &amp;amp; \enclose{downdiagonalstrike}{x+y}\\
\verb|\enclose{horizontalstrike,updiagonalstrike}{x+y}| &amp;amp; \enclose{horizontalstrike,updiagonalstrike}{x+y}\\
\end{array}
$$

此外， `\enclose` 命令还可以产生包围的边框和圆等，参见 [MathML Menclose Documentation](https://developer.mozilla.org/en-US/docs/Web/MathML/Element/menclose) 以查看更多效果。


#二、矩阵使用参考

##1．如何输入无框矩阵

在开头使用 `begin{matrix}`，在结尾使用 `end{matrix}`，在中间插入矩阵元素，每个元素之间插入 `&amp;amp;` ，并在每行结尾处使用 `\\` 。
使用矩阵时必须声明 `$` 或 `$$` 符号。

- 例子：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\begin{matrix}
        1 &amp; x &amp; x^2 \\
        1 &amp; y &amp; y^2 \\
        1 &amp; z &amp; z^2 \\
        \end{matrix} %]]&gt;&lt;/script&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- 显示：
$$
        \begin{matrix}
        1 &amp;amp; x &amp;amp; x^2 \\
        1 &amp;amp; y &amp;amp; y^2 \\
        1 &amp;amp; z &amp;amp; z^2 \\
        \end{matrix}
$$

##2．如何输入边框矩阵

在开头将 `matrix` 替换为 `pmatrix` `bmatrix` `Bmatrix` `vmatrix` `Vmatrix` 。

- 例子：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;$ \begin{matrix} 1 &amp;amp; 2 \ 3 &amp;amp; 4 \ \end{matrix} $
$ \begin{pmatrix} 1 &amp;amp; 2 \ 3 &amp;amp; 4 \ \end{pmatrix} $
$ \begin{bmatrix} 1 &amp;amp; 2 \ 3 &amp;amp; 4 \ \end{bmatrix} $
$ \begin{Bmatrix} 1 &amp;amp; 2 \ 3 &amp;amp; 4 \ \end{Bmatrix} $
$ \begin{vmatrix} 1 &amp;amp; 2 \ 3 &amp;amp; 4 \ \end{vmatrix} $
$ \begin{Vmatrix} 1 &amp;amp; 2 \ 3 &amp;amp; 4 \ \end{Vmatrix} $&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
- 显示：
|matrix|pmatrix|bmatrix|Bmatrix|vmatrix|Vmatrix|
|:--:|:--:|:--:|:--:|:--:|:--:|
|$ \begin{matrix} 1 &amp;amp; 2 \\ 3 &amp;amp; 4 \\ \end{matrix} $|$ \begin{pmatrix} 1 &amp;amp; 2 \\ 3 &amp;amp; 4 \\ \end{pmatrix} $|$ \begin{bmatrix} 1 &amp;amp; 2 \\ 3 &amp;amp; 4 \\ \end{bmatrix} $|$ \begin{Bmatrix} 1 &amp;amp; 2 \\ 3 &amp;amp; 4 \\ \end{Bmatrix} $|$ \begin{vmatrix} 1 &amp;amp; 2 \\ 3 &amp;amp; 4 \\ \end{vmatrix} $|$ \begin{Vmatrix} 1 &amp;amp; 2 \\ 3 &amp;amp; 4 \\ \end{Vmatrix} $|
　　　　
##3．如何输入带省略符号的矩阵

使用 `\cdots` $\cdots$ , `\ddots` $\ddots$ , `\vdots` $\vdots$ 来输入省略符号。

- 例子：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\begin{pmatrix}
        1 &amp; a_1 &amp; a_1^2 &amp; \cdots &amp; a_1^n \\
        1 &amp; a_2 &amp; a_2^2 &amp; \cdots &amp; a_2^n \\
        \vdots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\
        1 &amp; a_m &amp; a_m^2 &amp; \cdots &amp; a_m^n \\
        \end{pmatrix} %]]&gt;&lt;/script&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
- 显示：
$$
        \begin{pmatrix}
        1 &amp;amp; a_1 &amp;amp; a_1^2 &amp;amp; \cdots &amp;amp; a_1^n \\
        1 &amp;amp; a_2 &amp;amp; a_2^2 &amp;amp; \cdots &amp;amp; a_2^n \\
        \vdots &amp;amp; \vdots &amp;amp; \vdots &amp;amp; \ddots &amp;amp; \vdots \\
        1 &amp;amp; a_m &amp;amp; a_m^2 &amp;amp; \cdots &amp;amp; a_m^n \\
        \end{pmatrix}
$$

##4．如何输入带分割符号的矩阵

详见&quot;[数组使用参考](#五数组与表格使用参考)&quot;。

- 例子：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\left[
    \begin{array}{cc|c}
      1&amp;2&amp;3\\
      4&amp;5&amp;6
    \end{array}
\right] %]]&gt;&lt;/script&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
- 显示：
$$
\left[
    \begin{array}{cc|c}
      1&amp;amp;2&amp;amp;3\\
      4&amp;amp;5&amp;amp;6
    \end{array}
\right]
$$

其中 `cc|c` 代表在一个三列矩阵中的第二和第三列之间插入分割线。

##5．如何输入行中矩阵

若想在一行内显示矩阵，
使用`\bigl(\begin{smallmatrix} ... \end{smallmatrix}\bigr)`。

- 例子：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这是一个行中矩阵的示例 $\bigl( \begin{smallmatrix} a &amp;amp; b \ c &amp;amp; d \end{smallmatrix} \bigr)$ 。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
- 显示：这是一个行中矩阵的示例 $\bigl( \begin{smallmatrix} a &amp;amp; b \\ c &amp;amp; d \end{smallmatrix} \bigr)$ 。

#三、方程式序列使用参考

##1．如何输入一个方程式序列

人们经常想要一列整齐且居中的方程式序列。使用 `\begin{align}…\end{align}` 来创造一列方程式，其中在每行结尾处使用 `\\` 。
使用方程式序列无需声明公式符号 `$` 或 `$$` 。

请注意 `{align}` 语句是 **自动编号** 的。

- 例子：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;\begin{align}
\sqrt{37} &amp;amp; = \sqrt{\frac{73^2-1}{12^2}} &lt;br /&gt;
 &amp;amp; = \sqrt{\frac{73^2}{12^2}\cdot\frac{73^2-1}{73^2}} \ 
 &amp;amp; = \sqrt{\frac{73^2}{12^2}}\sqrt{\frac{73^2-1}{73^2}} &lt;br /&gt;
 &amp;amp; = \frac{73}{12}\sqrt{1 - \frac{1}{73^2}} \ 
 &amp;amp; \approx \frac{73}{12}\left(1 - \frac{1}{2\cdot73^2}\right)
\end{align}&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
- 显示：
\begin{align}
\sqrt{37} &amp;amp; = \sqrt{\frac{73^2-1}{12^2}} \\
 &amp;amp; = \sqrt{\frac{73^2}{12^2}\cdot\frac{73^2-1}{73^2}} \\ 
 &amp;amp; = \sqrt{\frac{73^2}{12^2}}\sqrt{\frac{73^2-1}{73^2}} \\
 &amp;amp; = \frac{73}{12}\sqrt{1 - \frac{1}{73^2}} \\ 
 &amp;amp; \approx \frac{73}{12}\left(1 - \frac{1}{2\cdot73^2}\right)
\end{align}

本例中每行公式的编号续自 [如何插入公式](#1如何插入公式) 中的自动编号公式 \eqref{eq:sample} 。

##2．在一个方程式序列的每一行中注明原因

在 `{align}` 中灵活组合 `\text` 和 `\tag` 语句。`\tag` 语句编号优先级高于自动编号。

- 例子：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;\begin{align}
   v + w &amp;amp; = 0  &amp;amp;\text{Given} \tag 1&lt;br /&gt;
   -w &amp;amp; = -w + 0 &amp;amp; \text{additive identity} \tag 2&lt;br /&gt;
   -w + 0 &amp;amp; = -w + (v + w) &amp;amp; \text{equations $(1)$ and $(2)$}
\end{align}&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
- 显示：
\begin{align}
   v + w &amp;amp; = 0  &amp;amp;\text{Given} \tag 1\\
   -w &amp;amp; = -w + 0 &amp;amp; \text{additive identity} \tag 2\\
   -w + 0 &amp;amp; = -w + (v + w) &amp;amp; \text{equations $(1)$ and $(2)$}
\end{align}

本例中第一、第二行的自动编号被 `\tag` 语句覆盖，第三行的编号为自动编号。

#四、条件表达式使用参考

##1．如何输入一个条件表达式

使用 `begin{cases}` 来创造一组条件表达式，在每一行条件中插入 `&amp;amp;` 来指定需要对齐的内容，并在每一行结尾处使用 `\\`，以 `end{cases}` 结束。
条件表达式无需声明 `$` 或 `$$` 符号。

- 例子：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
f(n) =
        \begin{cases}
        n/2,  &amp; \text{if $n$ is even} \\
        3n+1, &amp; \text{if $n$ is odd}
        \end{cases} %]]&gt;&lt;/script&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
- 显示：
$$
        f(n) =
        \begin{cases}
        n/2,  &amp;amp; \text{if $n$ is even} \\
        3n+1, &amp;amp; \text{if $n$ is odd}
        \end{cases}
$$

##2．如何输入一个左侧对齐的条件表达式

若想让文字在 **左侧对齐显示** ，则有如下方式：

- 例子：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\left.
        \begin{array}{l}
        \text{if $n$ is even:}&amp;n/2\\
        \text{if $n$ is odd:}&amp;3n+1
        \end{array}
        \right\}
        =f(n) %]]&gt;&lt;/script&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
- 显示：
$$
        \left.
        \begin{array}{l}
        \text{if $n$ is even:}&amp;amp;n/2\\
        \text{if $n$ is odd:}&amp;amp;3n+1
        \end{array}
        \right\}
        =f(n)
$$

##3．如何使条件表达式适配行高

在一些情况下，条件表达式中某些行的行高为非标准高度，此时使用 `\\[2ex]` 语句代替该行末尾的 `\\` 来让编辑器适配。

- 例子：
|不适配[2ex]|
|:--:|
|
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
f(n) = 
\begin{cases}
\frac{n}{2},  &amp; \text{if $n$ is even} \\
3n+1, &amp; \text{if $n$ is odd}
\end{cases} %]]&gt;&lt;/script&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;|适配[2ex]|
|:--:|
|
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
f(n) = 
\begin{cases}
\frac{n}{2},  &amp; \text{if $n$ is even} \\[2ex]
3n+1, &amp; \text{if $n$ is odd}
\end{cases} %]]&gt;&lt;/script&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
- 显示：
|不适配[2ex]|
|:--:|
|$$
f(n) =
\begin{cases}
\frac{n}{2},  &amp;amp; \text{if $n$ is even} \\
3n+1, &amp;amp; \text{if $n$ is odd}
\end{cases}
$$|

|适配[2ex]|
|:--:|
|$$
f(n) =
\begin{cases}
\frac{n}{2},  &amp;amp; \text{if $n$ is even} \\[2ex]
3n+1, &amp;amp; \text{if $n$ is odd}
\end{cases}
$$|

**一个 `[ex]` 指一个 &quot;X-Height&quot;，即x字母高度。可以根据情况指定多个 `[ex]`，如 `[3ex]`、`[4ex]` 等。**
其实可以在任何地方使用 `\\[2ex]` 语句，只要你觉得合适。

#五、数组与表格使用参考

##1．如何输入一个数组或表格

通常，一个格式化后的表格比单纯的文字或排版后的文字更具有可读性。数组和表格均以 `begin{array}` 开头，并在其后定义列数及每一列的文本对齐属性，`c` `l` `r` 分别代表居中、左对齐及右对齐。若需要插入垂直分割线，在定义式中插入 `|` ，若要插入水平分割线，在下一行输入前插入 `\hline` 。与矩阵相似，每行元素间均须要插入 `&amp;amp;` ，每行元素以 `\\` 结尾，最后以 `end{array}` 结束数组。
使用单个数组或表格时无需声明 `$` 或 `$$` 符号。

- 例子：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;\begin{array}{c|lcr}
n &amp;amp; \text{左对齐} &amp;amp; \text{居中对齐} &amp;amp; \text{右对齐} &lt;br /&gt;
\hline
1 &amp;amp; 0.24 &amp;amp; 1 &amp;amp; 125 &lt;br /&gt;
2 &amp;amp; -1 &amp;amp; 189 &amp;amp; -8 &lt;br /&gt;
3 &amp;amp; -20 &amp;amp; 2000 &amp;amp; 1+10i
\end{array}&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
- 显示：
\begin{array}{c|lcr}
n &amp;amp; \text{左对齐} &amp;amp; \text{居中对齐} &amp;amp; \text{右对齐} \\
\hline
1 &amp;amp; 0.24 &amp;amp; 1 &amp;amp; 125 \\
2 &amp;amp; -1 &amp;amp; 189 &amp;amp; -8 \\
3 &amp;amp; -20 &amp;amp; 2000 &amp;amp; 1+10i
\end{array}

##2．如何输入一个嵌套的数组或表格

多个数组/表格可 **互相嵌套** 并组成一组数组/一组表格。
使用嵌套前必须声明 `$$` 符号。

- 例子：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
% outer vertical array of arrays 外层垂直表格
\begin{array}{c}
    % inner horizontal array of arrays 内层水平表格
    \begin{array}{cc}
        % inner array of minimum values 内层&quot;最小值&quot;数组
        \begin{array}{c|cccc}
        \text{min} &amp; 0 &amp; 1 &amp; 2 &amp; 3\\
        \hline
        0 &amp; 0 &amp; 0 &amp; 0 &amp; 0\\
        1 &amp; 0 &amp; 1 &amp; 1 &amp; 1\\
        2 &amp; 0 &amp; 1 &amp; 2 &amp; 2\\
        3 &amp; 0 &amp; 1 &amp; 2 &amp; 3
        \end{array}
    &amp;
        % inner array of maximum values 内层&quot;最大值&quot;数组
        \begin{array}{c|cccc}
        \text{max}&amp;0&amp;1&amp;2&amp;3\\
        \hline
        0 &amp; 0 &amp; 1 &amp; 2 &amp; 3\\
        1 &amp; 1 &amp; 1 &amp; 2 &amp; 3\\
        2 &amp; 2 &amp; 2 &amp; 2 &amp; 3\\
        3 &amp; 3 &amp; 3 &amp; 3 &amp; 3
        \end{array}
    \end{array}
    % 内层第一行表格组结束
    \\
    % inner array of delta values 内层第二行Delta值数组
        \begin{array}{c|cccc}
        \Delta&amp;0&amp;1&amp;2&amp;3\\
        \hline
        0 &amp; 0 &amp; 1 &amp; 2 &amp; 3\\
        1 &amp; 1 &amp; 0 &amp; 1 &amp; 2\\
        2 &amp; 2 &amp; 1 &amp; 0 &amp; 1\\
        3 &amp; 3 &amp; 2 &amp; 1 &amp; 0
        \end{array}
        % 内层第二行表格组结束
\end{array} %]]&gt;&lt;/script&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
- 显示：
$$
% outer vertical array of arrays 外层垂直表格
\begin{array}{c}
    % inner horizontal array of arrays 内层水平表格
    \begin{array}{cc}
        % inner array of minimum values 内层&quot;最小值&quot;数组
        \begin{array}{c|cccc}
        \text{min} &amp;amp; 0 &amp;amp; 1 &amp;amp; 2 &amp;amp; 3\\
        \hline
        0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0\\
        1 &amp;amp; 0 &amp;amp; 1 &amp;amp; 1 &amp;amp; 1\\
        2 &amp;amp; 0 &amp;amp; 1 &amp;amp; 2 &amp;amp; 2\\
        3 &amp;amp; 0 &amp;amp; 1 &amp;amp; 2 &amp;amp; 3
        \end{array}
    &amp;amp;
        % inner array of maximum values 内层&quot;最大值&quot;数组
        \begin{array}{c|cccc}
        \text{max}&amp;amp;0&amp;amp;1&amp;amp;2&amp;amp;3\\
        \hline
        0 &amp;amp; 0 &amp;amp; 1 &amp;amp; 2 &amp;amp; 3\\
        1 &amp;amp; 1 &amp;amp; 1 &amp;amp; 2 &amp;amp; 3\\
        2 &amp;amp; 2 &amp;amp; 2 &amp;amp; 2 &amp;amp; 3\\
        3 &amp;amp; 3 &amp;amp; 3 &amp;amp; 3 &amp;amp; 3
        \end{array}
    \end{array}
    % 内层第一行表格组结束
    \\
    % inner array of delta values 内层第二行Delta值数组
        \begin{array}{c|cccc}
        \Delta&amp;amp;0&amp;amp;1&amp;amp;2&amp;amp;3\\
        \hline
        0 &amp;amp; 0 &amp;amp; 1 &amp;amp; 2 &amp;amp; 3\\
        1 &amp;amp; 1 &amp;amp; 0 &amp;amp; 1 &amp;amp; 2\\
        2 &amp;amp; 2 &amp;amp; 1 &amp;amp; 0 &amp;amp; 1\\
        3 &amp;amp; 3 &amp;amp; 2 &amp;amp; 1 &amp;amp; 0
        \end{array}
        % 内层第二行表格组结束
\end{array}
$$

##3．如何输入一个方程组

使用 `\begin{array}…\end{array}` 和 `\left\{…\right.` 来创建一个方程组。

- 例子：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;\left\{ 
\begin{array}{c}
a_1x+b_1y+c_1z=d_1 \\ 
a_2x+b_2y+c_2z=d_2 \\ 
a_3x+b_3y+c_3z=d_3
\end{array}
\right.&lt;/script&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
- 显示：
$$
\left\{ 
\begin{array}{c}
a_1x+b_1y+c_1z=d_1 \\ 
a_2x+b_2y+c_2z=d_2 \\ 
a_3x+b_3y+c_3z=d_3
\end{array}
\right. 
$$

或者使用条件表达式组 `\begin{cases}…\end{cases}` 来实现相同效果：

- 例子：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;\begin{cases}
a_1x+b_1y+c_1z=d_1 \ 
a_2x+b_2y+c_2z=d_2 \ 
a_3x+b_3y+c_3z=d_3
\end{cases}&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
- 显示：
\begin{cases}
a_1x+b_1y+c_1z=d_1 \\ 
a_2x+b_2y+c_2z=d_2 \\ 
a_3x+b_3y+c_3z=d_3
\end{cases}

#六、连分数使用参考

##1．如何输入一个连分式

就像输入分式时使用 `\frac` 一样，使用 `\cfrac` 来创建一个连分数。

- 例子：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;x = a_0 + \cfrac{1^2}{a_1
          + \cfrac{2^2}{a_2
          + \cfrac{3^2}{a_3 + \cfrac{4^4}{a_4 + \cdots}}}}&lt;/script&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
- 显示：
$$
x = a_0 + \cfrac{1^2}{a_1
          + \cfrac{2^2}{a_2
          + \cfrac{3^2}{a_3 + \cfrac{4^4}{a_4 + \cdots}}}}
$$

不要使用普通的 `\frac` 或 `\over` 来创建，否则会看起来 **很恶心** 。

- 反例：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;x = a_0 + \frac{1^2}{a_1
          + \frac{2^2}{a_2
          + \frac{3^2}{a_3 + \frac{4^4}{a_4 + \cdots}}}}&lt;/script&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
- 显示：
$$
x = a_0 + \frac{1^2}{a_1
          + \frac{2^2}{a_2
          + \frac{3^2}{a_3 + \frac{4^4}{a_4 + \cdots}}}}
$$

当然，你可以使用 `\frac` 来表达连分数的 **紧缩记法** 。

- 例子：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;x = a_0 + \frac{1^2}{a_1+}
          \frac{2^2}{a_2+}
          \frac{3^2}{a_3 +} \frac{4^4}{a_4 +} \cdots&lt;/script&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
- 显示：
$$
x = a_0 + \frac{1^2}{a_1+}
          \frac{2^2}{a_2+}
          \frac{3^2}{a_3 +} \frac{4^4}{a_4 +} \cdots
$$

连分数通常都太大以至于不易排版，所以建议在连分数前后声明 `$$` 符号，或使用像 `[a0;a1,a2,a3,…]` 一样的紧缩记法。

#七、交换图表使用参考

##1．如何输入一个交换图表

使用一行 `$ \require{AMScd} $` 语句来允许交换图表的显示。
声明交换图表后，语法与矩阵相似，在开头使用 `begin{CD}`，在结尾使用 `end{CD}`，在中间插入图表元素，每个元素之间插入 `&amp;amp;` ，并在每行结尾处使用 `\\` 。

- 例子：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;$\require{AMScd}$
\begin{CD}
    A @&amp;gt;a» B&lt;br /&gt;
    @V b V V# @VV c V&lt;br /&gt;
    C @»d&amp;gt; D
\end{CD}&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
- 显示：
$\require{AMScd}$
\begin{CD}
    A @&amp;gt;a&amp;gt;&amp;gt; B\\
    @V b V V\# @VV c V\\
    C @&amp;gt;&amp;gt;d&amp;gt; D
\end{CD}

其中，`@&amp;gt;&amp;gt;&amp;gt;` 代表右箭头、`@&amp;lt;&amp;lt;&amp;lt;` 代表左箭头、`@VVV` 代表下箭头、`@AAA` 代表上箭头、`@=` 代表水平双实线、`@|` 代表竖直双实线、`@.`代表没有箭头。
在 `@&amp;gt;&amp;gt;&amp;gt;` 的 `&amp;gt;&amp;gt;&amp;gt;` 之间任意插入文字即代表该箭头的注释文字。

- 例子：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;\begin{CD}
    A @»&amp;gt; B @&amp;gt;{\text{very long label}}» C &lt;br /&gt;
    @. @AAA @| &lt;br /&gt;
    D @= E @«&amp;lt; F
\end{CD}&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
- 显示：
\begin{CD}
    A @&amp;gt;&amp;gt;&amp;gt; B @&amp;gt;{\text{very long label}}&amp;gt;&amp;gt; C \\
    @. @AAA @| \\
    D @= E @&amp;lt;&amp;lt;&amp;lt; F
\end{CD}

在本例中， &quot;very long label&quot;自动延长了它所在箭头以及对应箭头的长度。


#八、一些特殊的注意事项

|**!! 本段内容为个人翻译，可能有不准确之处 !!**|
|:--:|

These are issues that won't affect the correctness of formulas, but might make them look significantly better or worse. Beginners should feel free to ignore this advice; someone else will correct it for them, or more likely nobody will care.

现在指出的小问题并不会影响方程式及公式等的正确显示，但能让它们看起来明显更好看。初学者可无视这些建议，自然会有强迫症患者替你们改掉它的，或者更可能地，根本没人发现这些问题。

Don't use `\frac` in exponents or limits of integrals; it looks bad and can be confusing, which is why it is rarely done in professional mathematical typesetting. Write the fraction horizontally, with a slash:

在以e为底的指数函数、极限和积分中尽量不要使用 `\frac` 符号：它会使整段函数看起来很怪，而且可能产生歧义。也正是因此它在专业数学排版中几乎从不出现。
横着写这些分式，中间使用斜线间隔 `/` （用斜线代替分数线）。

- 例子：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;\begin{array}{cc}
\mathrm{Bad} &amp;amp; \mathrm{Better} &lt;br /&gt;
\hline &lt;br /&gt;
e^{i\frac{\pi}2} \quad e^{\frac{i\pi}2}&amp;amp; e^{i\pi/2} &lt;br /&gt;
\int_{-\frac\pi2}^\frac\pi2 \sin x\,dx &amp;amp; \int_{-\pi/2}^{\pi/2}\sin x\,dx &lt;br /&gt;
\end{array}&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
- 显示：
\begin{array}{cc}
\mathrm{Bad} &amp;amp; \mathrm{Better} \\
\hline \\
e^{i\frac{\pi}2} \quad e^{\frac{i\pi}2}&amp;amp; e^{i\pi/2} \\
\int_{-\frac\pi2}^\frac\pi2 \sin x\,dx &amp;amp; \int_{-\pi/2}^{\pi/2}\sin x\,dx \\
\end{array}

The `|` symbol has the wrong spacing when it is used as a divider, for example in set comprehensions. Use `\mid` instead:

`|` 符号在被当作分隔符时会产生错误的间隔，因此在需要分隔时最好使用 `\mid` 来代替它。

- 例子:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;\begin{array}{cc}
\mathrm{Bad} &amp;amp; \mathrm{Better} &lt;br /&gt;
\hline &lt;br /&gt;
{x|x^2\in\Bbb Z} &amp;amp; {x\mid x^2\in\Bbb Z} &lt;br /&gt;
\end{array}&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
- 显示：
\begin{array}{cc}
\mathrm{Bad} &amp;amp; \mathrm{Better} \\
\hline \\
\{x|x^2\in\Bbb Z\} &amp;amp; \{x\mid x^2\in\Bbb Z\} \\
\end{array}

For double and triple integrals, don't use `\int\int` or `\int\int\int`. Instead use the special forms `\iint` and `\iiint`:

使用多重积分符号时，不要多次使用 `\int` 来声明，直接使用 `\iint` 来表示 **二重积分** ，使用 `\iiint` 来表示 **三重积分** 等。对于无限次积分，可以用 `\int \cdots \int` 表示。

- 例子：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;\begin{array}{cc}
\mathrm{Bad} &amp;amp; \mathrm{Better} &lt;br /&gt;
\hline &lt;br /&gt;
\int\int_S f(x)\,dy\,dx &amp;amp; \iint_S f(x)\,dy\,dx &lt;br /&gt;
\int\int\int_V f(x)\,dz\,dy\,dx &amp;amp; \iiint_V f(x)\,dz\,dy\,dx
\end{array}&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
- 显示：
\begin{array}{cc}
\mathrm{Bad} &amp;amp; \mathrm{Better} \\
\hline \\
\int\int_S f(x)\,dy\,dx &amp;amp; \iint_S f(x)\,dy\,dx \\
\int\int\int_V f(x)\,dz\,dy\,dx &amp;amp; \iiint_V f(x)\,dz\,dy\,dx
\end{array}

$$无限次积分：\int \cdots \int$$

Use `\,`, to insert a thin space before differentials; without this $\TeX$ will mash them together:

在微分符号前加入 `\,` 来插入一个小的间隔空隙；没有 `\,` 符号的话，$\TeX$ 将会把不同的微分符号堆在一起。

- 例子：
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;\begin{array}{cc}
\mathrm{Bad} &amp;amp; \mathrm{Better} &lt;br /&gt;
\hline &lt;br /&gt;
\iiint_V f(x){\rm d}z {\rm d}y {\rm d}x &amp;amp; \iiint_V f(x)\,{\rm d}z\,{\rm d}y\,{\rm d}x
\end{array}
```&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;显示：
\begin{array}{cc}
\mathrm{Bad} &amp;amp; \mathrm{Better} &lt;br /&gt;
\hline &lt;br /&gt;
\iiint_V f(x){\rm d}z {\rm d}y {\rm d}x &amp;amp; \iiint_V f(x)\,{\rm d}z\,{\rm d}y\,{\rm d}x
\end{array}&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;感谢您花费时间阅读这份指导手册，本手册内容可能有疏漏之处，欢迎更改指正。
更多语法请参见：&lt;a href=&quot;https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown&quot;&gt;Cmd Markdown 简明语法手册&lt;/a&gt;，&lt;a href=&quot;https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-高阶语法手册&quot;&gt;Cmd Markdown 高阶语法手册&lt;/a&gt;。
祝您记录、阅读、分享愉快！&lt;/p&gt;

&lt;p&gt;Drafted &amp;amp; Translated by &lt;a href=&quot;https://ericp.cn/&quot;&gt;Eric P.&lt;/a&gt;
2015-10-02&lt;/p&gt;</content><author><name>冥郡</name></author><summary type="html"></summary></entry><entry><title type="html">模式匹配之KMP算法</title><link href="http://localhost:4000/github-io/2018-07-16/CAL-01_KMP" rel="alternate" type="text/html" title="模式匹配之KMP算法" /><published>2018-07-16T00:00:00+08:00</published><updated>2018-07-16T00:00:00+08:00</updated><id>http://localhost:4000/github-io/2018-07-16/CAL-01_KMP</id><content type="html" xml:base="http://localhost:4000/github-io/2018-07-16/CAL-01_KMP">&lt;p&gt;#问题描述&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;模式匹配:&lt;/strong&gt;字串的定位操作通常被称为串的&lt;strong&gt;模式匹配&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;最简单的模式匹配方式：从主串S的第pos个字符起和模式的第一个字符比较之，若相等，则继续逐个比较后续字符；否则从主串S的下一个字符起再重新和模式的字符比较之。依次类推，直至模式T中的每个字符依次和主串S中的一个连续的字符序列相等，则称&lt;strong&gt;匹配成功&lt;/strong&gt;，函数值为和模式T中第一个字符相等的字符在主串中的序号，否则称&lt;strong&gt;匹配失败&lt;/strong&gt;。&lt;/p&gt;

&lt;h1 id=&quot;模式匹配的改进算法&quot;&gt;模式匹配的改进算法&lt;/h1&gt;

&lt;p&gt;D.E.Knuth 、V.R.Pratt 和 J.H.Morris同时发现，其算法的本质改变在于：每当一趟匹配过程中出现字符比较不等时，不需要回溯指针，而是利用已经得到的部分匹配结果将模式向右移动尽可能远的一段距离后，继续进行比较。&lt;/p&gt;

&lt;p&gt;在此不对算法本身做太多阐述，网上有很多说明，仅仅是，完成我自己在理解此算法之后，写出相应的代码。&lt;/p&gt;

&lt;h1 id=&quot;求next与nextval与匹配&quot;&gt;求next与nextval与匹配&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&quot;language-{c}&quot;&gt;#include&amp;lt;stdio.h&amp;gt;
#include&amp;lt;string.h&amp;gt;
#include&amp;lt;malloc.h&amp;gt;
#include&amp;lt;memory.h&amp;gt;
#include&amp;lt;time.h&amp;gt;


void Next1(char *pattern, int next[]){
	int length=strlen(pattern);
	*(next)=0;
	*(next+1)=1;
	for(int i=2;i&amp;lt;length;i++){
		int aim=i-1;
		while(pattern[i-1]!=pattern[next[aim]-1]){
			aim=next[aim]-1;
			if(aim==0)
				break;
		}
		next[i]=next[aim]+1;
		
	}
	for(int i=1;i&amp;lt;length;i++){
		if(pattern[i]==pattern[next[i]-1])
			next[i]=next[next[i]-1];
	}

}


void NextVal(char *pattern, int next[]){
	int length=strlen(pattern);
	*(next)=0;
	*(next+1)=1;
	for(int i=2;i&amp;lt;length;i++){
		int aim=i-1;
		while(pattern[i-1]!=pattern[next[aim]-1]){
			aim=next[aim]-1;
			if(aim==0)
				break;
		}
		next[i]=next[aim]+1;
		
	}
	for(int i=1;i&amp;lt;length;i++){
		if(pattern[i]==pattern[next[i]-1])
			next[i]=next[next[i]-1];
	}

}



int Index_KMP(char *S,char *T,int pos){
	//利用模式串T的next函数求在主串S中第pos个字符开始匹配到的位置
	//返回-1时代表没匹配到
	int i=pos,j=0; //i是指主串的，j是指模式串的
	int *next=(int *)malloc(sizeof(int)*strlen(T));
	NextVal(T,next);//这个过程是O(m)的
	while(i&amp;lt;strlen(S)&amp;amp;&amp;amp;j&amp;lt;strlen(T)){//这个过程O(m+n)
		if(j==0||S[i]==T[j]){
			++i;++j;
		}else{
			j=next[j]-1;
		}
	}
	if(j&amp;gt;=strlen(T))
		return i-strlen(T);
	else
		return -1;
}



int main()
{
	char *a=&quot;aaaab&quot;;
	char *b=&quot;aaaaab&quot;;
	printf(&quot;a&amp;amp;b KMP position: %d&quot;,Index_KMP(b,a,0));
	int n=strlen(a);
	int *nex1,*nex2;
	nex1=(int *)malloc(sizeof(int)*n);
	memset(nex1,0,sizeof(nex1));
	nex2=(int *)malloc(sizeof(int)*(1+n));
	memset(nex2,0,sizeof(nex2));
	for(int k=0;k&amp;lt;100000;k++)
		Next1(a,nex1);
	for(int i=0;i&amp;lt;n;i++)
		printf(&quot;%d &quot;,nex1[i]);
	printf(&quot;\n&quot;);
	for(int k=0;k&amp;lt;100000;k++)
		NextVal(a,nex2);
	for(int i=0;i&amp;lt;n;i++)
		printf(&quot;%d &quot;,nex2[i]);
	printf(&quot;\n&quot;);
	
	return 0;
}

&lt;/code&gt;&lt;/pre&gt;</content><author><name>冥郡</name></author><summary type="html">#问题描述</summary></entry></feed>